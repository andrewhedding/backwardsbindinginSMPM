%!PS-Adobe-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: /Users/aahedding/Documents/GitHub/backwardsbindinginSMPM/.texpadtmp/Control.dvi
%%CreationDate: Fri Jun  1 21:51:20 2018
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: NimbusRomNo9L-Regu NimbusRomNo9L-Medi
%%+ NimbusRomNo9L-ReguItal CMMI10
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: /Library/TeX/texbin/dvips -o
%+ /Users/aahedding/Documents/GitHub/backwardsbindinginSMPM/.texpadtmp/Control.ps
%+ /Users/aahedding/Documents/GitHub/backwardsbindinginSMPM/.texpadtmp/Control.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2018.06.01:1451
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: NimbusRomNo9L-Regu
%!PS-AdobeFont-1.0: NimbusRomNo9L-Regu 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Regular) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-Regu def
/PaintType 0 def
/WMode 0 def
/FontBBox {-168 -281 1000 924} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E152A40E590419249F2E4
C36159F8E54B532468E36965A38646781AB0B7F6A3E851FD10CAA49ADFC1E546
2FD2EC6150DC6E19523050F6148348A561AD8D2E2721EFF8A570CB33460A745B
926C889304C09753C2D78FB0CA95DC6DE5B8C524752C83601E7E9F73DF660674
F05AD83A166DA9BE89F22FEABD4B2665960F6FB5BC32928E1230C212E5D69CEE
0B3311A1738A11747AE263106916D8E95F25B25B4BC6AFB03B79ABB95DDA518B
41A49458111D2A1433C043627EF9460D324FFE22935F4F6DA88B8B91AE95B34E
08408A34EC8EAC3F65B6AE3E3E2524867EE9D29068F81E4372F4470BEEB4D6BE
EE4DF956BECC0CB77F8490117B22B2FB75C938ED0A5E208D88BC38B2AB8B9CFB
F1D53084B6F43DF336481ECA0AA2D5317BC83FC0E1D4DB01D0B7707EEF217E94
A7F985102DED27D8E8B009F7EF6DB91B91E78BFAE7BD688E10B3DC9AC77CDEE8
47AA4DC8EC78241E593D26EC7A60696151A2AE5325D736E99E01BDCBDE69579F
92EEEC224B6757EEDC64A75455BB665DF42A0E4CE7B99BF3E7D66F8FFC8C13F9
D7A1FF7A9D5FF7AC43396779F11C9B008C33A2043D48B61B88B03104B1425F09
675B559CA4302C001EE80D2B739CC0FD1023BF4F1FF9C01E892E59CCA7C26011
B8E0B6D29CC29FC72792FDA5E7D5D88EF98F9DBA960C96534C399C54865EAB86
0FA2E0D6C7C44B553EAC1574D55E7970744D4792FFFBDCE6FB4365BDBC2965BB
2E9EDAD9E0EBF0B620DB415AD98297F5AE83D9C710436657E74D26E83957C745
89834337035A7501803947F6880B70E56A3A404C62D57B849D28804CBE0F5884
435A0E12DCC9BA414ABB732BFBAE237001F557DEA5E972BA0838A3C7C9EB75AA
4A050DA0A529BDFFBF9011C360564FD17A02C18860AF6B86EFD4E2C125686C9A
5E114E95C71FC89A5DE9C589BFE5AC0480CFF716345265D2435EDAE67CFC4801
5BC08E7A48D683ACDB91E05F469C0C8919D73A5D07A1CCB173E30E76680ACB09
02A40A3E11916198BD69F1A26E88330F50692D0D5917E99E7A01B327413E24AA
E98EA484E45897E6AE4D6997B6E8BBF61C9406E916D56985CB2BD297E8ACFC6E
CF2D2281AD84696B7C6CB584BD85CC20BA14ADD3BC3E25DB91124C0ACF22E902
3CFBF04CC40DE331991E9075D22AB5EE0E849B340050E6C417C664A782D05549
DB2EF572F193B1C12B4635C2B358747046DE585F4EC4885783EC27EF4D1102CA
1E6B6BF88E699F74373394783BAE280A5AF61C7216D2289EEAA8379EE7D87A92
EB5879BE4EF03B9AEB3EE0F9BC0F3E5C2D06D80F724CE1681D5B258702019FE5
2BFB989F80F63FFD1470AEB4759AAFD4DC3147EC63E317951A46454B745938BF
B2786ABAFDBE642C963411F03B42C7ADBDEE54A45F917410D95D6D99B372D223
600DBB4489E38DD4A5C20C9F81169CD3AC8E20EFFC27ECE0E3C0AF12C09F289E
5A5F8DF8487065AA61F7ECFD18EFBF27F055BE0733AF0079569E4CFF64EB1201
2214C6552E59A0D4FB4A0B10CCEA6646210248C7098DE2D3CB07383AE2E2FE67
65F11F5216359423A95AD7CA9B8C59645F5A8D84FB1C177AED502F9F054D68CB
91DE60D05224C9DBA79A84DC57C2EBDA8E422A9550A2E12CBA8ED26D3288E2F0
160FAD0FE07B2188A293FAF4C903F54E22E2B141D5417FC4E56B370A532047DF
CA63954C0858B48FAAC42A030D7CAEEB66D566CD165A4007DCC1ACB79739227B
0AC59369CAF4916281E4769A9CBDDEC9665BBFC81DDBFBBABB1654FAA5CAEF96
3BFB70CCA5ED0FB14FFEC866A1B6351BF489CCF33778462E0B1CFF4690692DDB
E68A92CAFAA72A689CCDEED10BE76BC555C63113ADAD38F76C7ACCE6A4C70DC3
D3C5CD3B5E0513A540D0C7575D56000265B54EBF0A3A48F40D2D8392CB24B922
F94EDC99DE5515C8C45631BF269CC8B89441B674EC0697CB2FFCE88AE15E2F88
4193E1D5FDC28A8A7F6FA6EC89007816A15A1A400EF8B76F97E3AE0BE67C17F1
0803CD85C849216634B6333A96AD20CBD0499BF77A95150B847315C78C38F8AB
DD54603B2AE10E641A09DC65AFDF4060BF900FF57B6C47552BDA9A6C752EC4FF
C5B6B3D043B1309F9E10F186760E30AC1B344132E34B82D0C5FB9864BF4AE136
954C8D89F6B3DCD437AE24A79EFD779FFAA9C1962488D39D697A9749141D0462
6972EBD469BC2AAE540F46F28AB949A6BD6B76592A8D65D698C1D3B450D864B6
B348501D3073C42AC1EEB4E838CF05D8AC25E723FF843C95A9C9F22364247817
978BD9052EAB20A47BA58EAE57E5379C7DFA2EEA9B7EE86FFF8CAA8BB0397CE3
F7CB07D1E2B91FC38A2BB150D25BFB1A7EDD6948F1A3A745549A2C8D7DA347CB
1BBD434910A01E975212A1C1F95A92C43473201928836FE52E18111F2D872711
7CBAB3E2C0C6A9E79A3DEAD200247FA31962915382826026F1395A421A62C946
7B9623ECB331C37552AEB0C26C0802B5C5E46A78326C70381871706BA66C2FEC
7D51134435F45503A0ADFDDDC39A4A154BB325F7D0C2D1441CF549FD2749FCEC
6576CA84F82AB140E17B8CD77E04B7956F7C7957763D8371C3D94C97916E7C29
6658698D5CB9A4AAE633A9AAE86E4CBF012BABD877E83D4BD9A618950C657505
27DE436726C96B66839467A9F1280CA84AA8CF95A2AD957AFA4B7F794CF2AB99
A8E8273B2C0E5055E3212944B85FB6020B097082E73589630B1AF166CC26B3B6
ABE306F6F7C2CD4CDEE4573F6AB053EBB67B9D376EB26536696DDE5F41F68A7B
CA1C18D864C80F0FF32878579A9AF5F7BD74CA38B965EB462DC2301DA8ED007D
28A54351F110018EF424644E6D51041D277666E5116C1EB9F684088B3696B8EA
505FD758AEC4B4494538D0E51ECA736BAC9CD9DE81072CDA24887282FE258C47
F071209B472146DBBE12D78B33D998743CA8E92069AFCF32E52179043FC8AEB3
1A8ABF85FC84D206537750E7DC4F5F77764B02FAF673143613708F967186E0BA
18C470914CF1D522123E627D00097377258E81CD0693D102D0E6B37E7BAC1AB2
770B68030BA4F0E1319773798435CE532956A864B66EFEAED5C16287F5EAF2B5
9313804D6960AA6F0C136BBED6E020CA50ECC4A8ADFE8D86B613F9E6BD8B447E
504044014B09C17AF6116674F20161A512ADE5004EAC1983C3A27BD79841F5CB
87A377ADBF202718B9E47B1DB784435B7ED880C22B31D1F538028370500B480E
7F4CEFD31FEF6B43D1BC07B49265B4D2BCF58254B7C5977F09630EF31883AD46
C7FE256D4615B6069F44ABBE7BB826A021BC7DC49648D46F2741B3A91D9032F2
4ED8F7853E887EEAB0B483D222394299B2E316A364801A09F2A1A6C45721B36B
CE33C6F9A7F35D948232BE5AD2A733D93F732BAE5C829A64F189DB3FB249EB77
5AEF178D35B2833F1A53A80E058C1EC14B91C6611D42171313530960AB33B369
EBFA1BABC1CA2D5134F45D29A6B34AA93004CE2C9768561BF1201B86813C6B89
EA16AE1CE81A77348532C91F1B312141BA6CC5B99C850C4A7FDA904A484B3A66
8FDF5AB0BBC6F07E95E550DBE318F0E3BB6CFD162248591CE0E29DD2B10277C5
73506FC074B7425C2118FEE7AB590526F761841A3F75EF81A067E639FACA9F74
B802024922C370033BF2D78A8C7BEC233EB4E88A2EC9B141FF1B03FDB8B2D4E4
DF51467DC88CA999BBF9369279B30D5FEF3D0C4AD996DDECF5DD6D450E71E3B8
BFE18C9CD5BB52B986C29F4A410D37EE9B580E6F53C4FDF7178A2EAC9BFEF3C0
A1D1E80A91B1917E53F9CABDBE91FFCB58E95D2B28C3EC7D6505E47199E51515
D2BA0D44855014654D1A999CAD1A5E9DD1FB1A76C03F37CEF94FA4247020DABD
96113671378B90FEC633F4D753F6CC0F03177916551AC63C78F5019B1C266417
C8A24A4EEE010E977C6C61D3B4B6B0FAC43A307C41F5815F3A3191BC1067412C
EC7957BDFE70D6E2D14546AD2314D02795908C3E1E5EF0ECCBBC3C56AC0DBA68
06583345306850ECBEDBDDEE18080D23859E77D2FDC2EF01E888148FD13E5C6C
EDAB2998DED2A64813046DED024D6F0F00E85076B37721A1B617B4AE15F283B1
5B6ACBA91596CEB068B4739098289DA6CA9DC9E2EA92B8A3ECD200528D5160C7
E9F62B45E82662DCE140C5591BE4BD894F61FBF6A20D7DEC79409932F66214DA
0C23723708193F85CB963A126250DAE2113775B71AD0E6B88D1EA5345916EEE6
029B6F83DC9E400937005A61B2D88CE24EF6D509121EF9537AFA9BB3599DA090
50D122D1452A61F693559A3CCC26E7DCD3AABA97471755510C4F3B80B239BD2A
A03C4A41B2BE20BF99138879A831C45EE0B7A6106E64CF61353705BBA89516DB
E2B4DEFFA920C3DC977220AB9A39B86887A3A742DEEFEDFB47D236F1DF488EA9
100D499A87C0AD139B300F3E8A3CB3498FB39A2DCA1EF87A1885D1F6486AB1F8
4E9FB2EDBFB4B8853524F58D4E1EB98EEBEE61040636ACD6743E692C1E526506
4096DF8DBE333B33BB037950899E634D204BE9CDAD8C8BC1F6FCDB8314C09389
9F508FC08582AF0D99DAB133269336E6758A7762C22376111B37204A9D539291
47A7ABFE05161822BAF136CF6F935F9DAB04699CB2F4806A95C25780D522D5C2
816F47E2A952C9ADDF9CCA6F4D37A9B913EFF23C0887FC4FB72F4230B389A52B
DD871C2B71EABAC5FA0E43E28A002C50FFCE40AFD163789CF9C3A0E3C56DC5C3
FF091F9765A177A4439E521102E6CF6A52A972C5B9586DE3098DDBEFF067C955
DBFF80F721342CE58E7EEFF0ADE1F4955D8FA8605578774AC461C4FF48C62DFA
48FABC8A69CFFF6976EB6E04E8FED154652762603E672EA5193145D749F653F1
13EB1E99D5877CAC385BEBD60D212645715D797FEC9C8A4F0EEB7043074DD63D
CACC9C7EF294F94136D1DED572771BF47EFEBB1BFA166A088B8F232012896F12
2727523861B7575B1CE1913A21F06F84ACB4D05C25DBF155265B69D4A92801AF
9E1B1675357FAD583F6C69AAC18F35C36022EFAB437A48B1D7B2E5B2D9E29357
68B18675764BD1BAC318E2717E7BDA4097FCB8FCB635C4ED1F8155D046D0C8BB
E8B77A3EA2591E651BE480828A3A4E0F6220F6063DD3A44072F1D24EEBD0E9D5
EDAC08327257D9BEB1BC43CE626586FD77921C79F575FBE9DABBF55B076E1577
27BB8331B85E8B3D5C8945A32DD810B365DF1F1DA5439DBC0A78B3D12117C969
7DA80E78DCA3A211F05FACEF493B01D749CF26F6A94321C8CEA6142FC0C31D33
CF41A04830DEBCD0FC05F53B4C49B8421EF17722847C88C9C0A274BCCAFA8807
37CBEF797D619F298E71FA5F553CB0D81A7FE5AC5F81A314DC8FD4300F413FE3
FA916CEE163ABA54C7A51A07E85CA2636D0F1FEF45942CEA340CD3C14979A7A0
E1B67ED1E5A9108496421E6962BDCC4B48DED36DA66833B75740DC8521A28559
222798CEB039D1DE46823ED3EC0C7AD40C03F02EEDBC428E5A68AC54DD8D4937
DE8BA3EA45050FD3F48ED813F1FD5A176DE23C5463A8A16C405B72AAA52040F5
2CA184B1A1563C093244E074C1F6EC2E9F6999B91D37A16F0B1A5BE4D280E14A
71198359128C99461E409479A20FFDD7B44EC5926D6E3810A8F3E4660ACEAE5D
9D0F9A66820A654E2172ADD4EA1ADE0A08009D2CEBBD8EA7BA2E9F8B8FE40033
F67205CDD011119EA28A3A8F58803E3D52DB586338B92AA54EA6E94CF68DC85C
76FD06BA4B0915B9EEBD55FE0845BAE801DB3611D794FB1A1D878BFDBB49FD84
9E3162B9C583897864E59CE6F46F213B0EA52186A28B663237E82970FC0EC032
AED2A2FD2D948114EEA12AD5B7466F76A8368D8F9543230805C8763BA4DF2FCD
DE69211DA05FF14547300FFAB1FD39409175426098BC9B865FA98786E84DD5EE
FB812AF7063F2452283305BC17D596AB465DBC711A2FC1016600AF74BAD56D7F
2FD146D760727435015213CFB157A1414B133ACB4DF65F79EC30FDDEFCE6DC3C
07934FE9CD4ACE122EE7110F6C11E1FD27431377F103A3AD8DCADBE15ADB3D73
843902BCCCB3580B83DC0102166269AB6A4120664D35522EADAC9FFE1131374E
B2AADDB2337DBAC31F3357D218276A5D0FA4EADB3616CBBE98428D5D83FABD59
1EB9678EBB5A676561BF61FABAB8309AE123A450B827979656F1A784A31205E7
FCD7CDAE6896C7ADE22D8465DCE659C1E6CDCFCB3FD92105DD8321822EBABB20
B9AD13420A57E20E9018C5E4275A86F04D17BE7FF0A4D3E110560C5D7D178EC6
9CB8320C8E35C220F480EE8F0B22762C53FFFE56A92C1285811AECD0A056FB61
3A3D8FDE08F5B3CD57DC7B22900E6779F57120FC99EF7E5DAA501EAC31FE04D6
77B05578FA1A95E96321D6DFCE20133FC1B6C700F342975BDBA5D48902331A04
5A4349F7CC8CF4C1F394CD7FA1132EEB0C7442A63B99930B70AF8F801109F74B
C868F93D6E03DA4AE62D8FA4A564463D4851732E4E1C1AEEA429496D76F1BAE1
AD8D1F6E8D784C42C22DE1210BFE3CE7DE18E2AD59E903342F3AE9136BC7EDAA
84DA48C4A5672B658DD2358E313E1970812822F1927A091FEEA2E3B6A1488420
07A62060A3FED179DEF76BF135231307A12B391899DA71248EA38491D4FEF210
E556DB91155007B620A33B1BD4760AFC6D5599359839EE5AF75586A0E671EA5D
FBE938CD3F59C2BF0FB695968D07883DDCCD155753D01C5DEC0F6D9CA2199902
98D2113E5404A63924FAB720035945B624DCF01CED6402040CC27A95435EF789
32BA792454339DDC979C4E144B2DAD567A8D6A0EE7DED9B2EA31876F2BC71C27
623712B626E7C8E5561D483B96942FDBA38C24AB78A7E2A6F84B60C3B0BD25D6
418687ABCF85994A28C7BCFD78AE01225A799EB6ED154F15973E3E3F5DC69658
26C7084159A093187867E1E0BF6503BDB6B2884FD7D0846B8E6A5E918D0D9006
20C98D80CB40CEFD7F73B844C372AFCF6EB41D3B5ED98C6D02341ECB3E8090CB
13757E95206B16E8AF5B419BC79F44BB1433E602751E540D99568AF90630F097
7C9973458A249B945B6C3322B5F5B1AD9F65678B7F0B51AF13268CA45E353D5F
F764A7DE575F008D0BD60781BA70543CEE83B717474048C192E2046F66E5B738
9276D6AC05008E7EA90A7925B3C9BC8FD55A7453FE3BE42A2BF4F067A44FDC11
6F38A94BA54C5600A64CCA80D7DD792C8363BC5B25B654E9B4BAA086BD2C47A2
20ACF7A92EEA43743281799D40A8509F174D0A976592F3A4E11301C4568B1DE6
1CCD1560FAB2E28F43F9347D3FA9BEAF1D15251AE03F53A9AD5638E28ADEBC50
EF36E2B49709149FEC1ED38D6F881598599C1B04F68C453A1425C2FCD97662E8
5F5A1ABB47171E4F012FB1E63CAD2D4FB40282FF090B0B84D5178974989E72D5
98A43D47BC256016819AE4E9D95853BA4CA95C8BA1653959BD6F18A593F7F2F7
27BAE27D7A6620293E8E7E45873CD3DD3281D71574370C35C4DDAFB83D71ACAD
15CDFC5616C4309919470BAEF23272BA1F075ADE1C4B8379572C44B9B35323A9
6FA3E5CCCFF9C8C10857538EF69DF7DA4501F0204E764E88015571DE307E4C4E
BCA4104A2E8235126838CD819D89AB191B7F266F9203A2D550A477BEE5CCE86E
F8B6EFE48D41AFC13732C3C2864C63C768490F20694FB0AAF010EC2C3028247A
BAEECE36F0C62099F3DB8B9060FF1E030748189C553B05E9F46A7F1BE08D230D
77DF2690D707095F80525FDC5A0B6AE52D7C34ABB8AB042401FD28868C6C6BED
22D95485BE6186F8CE8F758BCAF274240B440CB31E2F737E94EDD1C97806D6C7
F745A679142D87684FFE066E64E9D9E7FFAE845040727773B14A1D7296E625CF
C3E853E2FEA8870DAFD1D5E19D42A419FB6AED77B61FDB49D2D36D11126BF3E0
D9D8CECEB2E6E552D1F3AFE28D495D11B083E17AA5F20FA02CCADEC0646F6CB7
2DC2E5F3ED32EB064D4AADFDBF4EB07AF4119B49E4B3BBA678E97314D3E1E1ED
348617311AB0D176FA3D438DB47B83BAE006522F75CBB63B5597AAD7F22D53E8
641C40BC872405B7183D2385AA4D74E4741583059D7C1EB226BF18BD5558F69C
9F18DB26F827A88DB7FE3C57E1DDCF4F3E734F0C5E89F868674C87036963319D
D58195B7D374AB25B33CD0382317789072AB871C254B8E7CD7E20DF06A99FF5B
BEC75F007F6875FE09EBA16C1FD6D8EB76082C265119A792515DA9ECFB24791A
70750DFCC7A497BAF6DE5A14B23D4FFB43C59D0AB3D25B7E761B77D4A1751F0D
8B45A6A0D65AC7CA612DB4B7762D89FB972A63A406C10DEEF835FC4BB6CC8D72
BEF671339F900ED3280F480296C631A44EB168F995F1D86F8EC12EF9BBAF98FB
89EB35A12862F0FDC71A16BFC0E9B9F4F3392859CD8FC55BFC2B5CDD25915226
A1A0E246F8F023272CD1DF9F03EE09AE36E330446490CFAB9B449F059AE81C6D
07846FC7D4FC175BE286F1F0C0BD599036BE7AA009A982F789288D1CC86F6E10
9C8195A73E655536A8A8F44A6BB4A34F1CB9A036D9FE456265BFB4846290D032
34B2F59CF8EED6512ABF8A67ACDD24FF6C70E5BBC2233CF8AAA711A055D23D25
333687C6BBCECCF0FD7B6C827C41F097AEBCE0BC33C9C98134EC7E62A08F88DD
C31324F6B978FEAFF057E519150BA61882BB826294FF90E1226FDF8F7F0AFEB1
73FE188FD4F8B24B1627141C6663315EA4E326A40CB41D240F2E2E7858F5B5BD
7412723F93CA8071A274AEBDC2330E54FDB6F96E6BC21BEB95A8CDDC23EF545C
F34C15E337E74DD4026EA56FA92178834CCAE70A08DC6C5E1A644D9C19E82947
21AF852399414A03D2D2239DD8F4C884C4FCFF3AE39EBA1AF456752CA355882C
661F9D677552B91A9CF74F2A195EAEEEDA16C9852F6844C3920853346594F0D3
026F4900770B39B28861773F670E7C5D5B06BEDA9990729C75B5BA3DFD65E2AD
D8F2F24D6DF96C7906DC4D3F814370CD3B1ACEE58FA9E3280A8E141775ED7DA7
4734480B48D114719BD5B35C8B84A6497F8CB34B040C29B9DF7ACD91FD9A259F
FE46546F8E776BF790ACBDD5888030E5A4CB94B0DAA79BE8E1296DE9C8BBC5DB
E964163171A15E705D921E6EB29842A5B728AC30EE119AC4250BE085BCB35C79
2B0369DF08A574991AA4B1CC169D08EF1ED2E41BDE6A3B399164BC68223CA5F8
6E7A13CCCAE33F62DEB5974AAC8BA8A0360B28CF7A31685C5D057E87E8E672F4
8655240D0AE98463E8CD5B077BDC9FE36C12546F794965F0F912F788CEB6FFF7
0669B2C7350DEF02B5A94DEF60AA08AEF8BD1D1813FF34AA5F8129976DF4C985
645FC6F0EBFE73AEDCA1F35CA8272F207D2005115C5C05AF47FEBB13F3CFBB09
3D67463338F619E88A53AEF4F9DCE0598F36E78937C775D17DA6D40CF7C7D8E4
34755E33112116A0A15521CFBCF34DB87A0842BA2225BE7D88EC5151E7249D4E
68F6864A43C02FD1F48CE28F3659552229F95FC89094524713FCB6078D279384
84F56851E2DEC94FF409DBA33FFA5D9EC97DDE3D271D5CCE5DBFF6226457B75C
7A6B0BAB62194F9331E193CE8DE116A76AD46AE35F9E93A74111251F6C6BCD59
694906779EBAF76AD26D3F24CBDEFCBFCE2FD10BCB1618F1BF76B233F5C3E0C2
48CB5170B2F8848FA8430BF39BDB3FE50FA7F5BB6C30882385E3EB0AAEF31C39
32EEE241576C1318D190B3F00392ECC117B8B004B038DBA504955E4986C30DCA
B5116818D6131DC1633BCD53DD4D3AD883156596A02801DB1ADACB352195F370
FAC8880F57CFF4291173BE37D8BF83E6EED6610B2C8E2F210A2BC15F36E6B1CB
D09075410C9A857FBC1FF8DB5AA29D60B224436D44737F2C915B8B7D1A586373
0DBE8260970B17DA93FDEB25B18BCBACFAF31326829CCB68CCDFDB3E674B7C56
CCD3F7355899D85E3DFD98DFE3F918A2DFA3BF615AE0600813D466AE82B35227
EFA2F26A639CF3BAA159E9B388B207BDEAD9C00737FABA3480170081B128E2B8
DCD067A4C16056337B32CCD305862F674A3E6BFE8CEB7D0A87F9936197F0A118
C73E766FA2AEA1356D51749AB8B2571439E5AF3F9C52F2F12907B1D883E9C983
5A264F405DFB55015C6B1506C850B6D177F18FFAC4643983268281B7A20EAB2C
97F2662619DD248E2FFA974847AD0CDA90A19858EF694C654196EDB648AAC302
9F234F088EDD32D751FB2989F72210C722E731EA11126FEDDB7E1AC0BDD18A86
2B5057D4B755E004A3A3A5769147FB77A25E9A4E9A5B2B808890A43D9E7F5910
4AADCF7974D4E110748F81DFDE2C7EF5B3C5422806EBA4D2DF54395C3C6179FD
AD7F86556D7A49C6DAEB1A3A6A7C7285FC6447584457B1565FE02E22AFA562A7
9B323D8B4FF8129A8E7FA0A4C950B1DF7F89007023AB53960CA8D94F844E51B2
F39FD0D26A37EDA816A80DA72E2C9B2C3F01D64E82FA58D9F350FD6758DFA0E4
A39EB83EA86C0A5D9EE93EF2AF27D2B50D1A92A420BA039CFA3DE9E3EC01B3C2
58B0D97514F9CD0757E3DE023DA5CB7CBEF82E6E4E3FB8E1FC34B6A2471C69F3
C1AA6D3A1E155BBCE4E21B7DA6F563F782E3A8E563DB906FD868E770E8837995
7CCCDE1D74374DD0F5524D328307F90041D351B844947C40B5D8C75ADA3F1A5B
A2A611C6FA52E9323191F7B83CB246CD2E4BD54017226DCB41A6A77F829E3F6C
B40BCBA184059390CF3393712DDEF829FFDAF5E74341B83BE025EE14F3FD8F77
D0AE3492A0E9965C33E501E54100E989CF0BB55EC84C02C98E0A1A6BD5BF1F8E
62D380C7849CDF06492BEC78C972A733E96492D3067DC940EC39A3D73A7CBFFD
A824842469788DA8FA6ED6A8582BDA6791F08238AD01C6655292FFD291A6BCF7
C05A89281F249262CD6AF153137676F08FCE2D6A3326564A6B5DC3297FB49F7A
FA80FB695BD715B463934D52A44E36C743DC3FB1A5F961E79714553D128688C1
7BA3055C85D171C037022C96F055DEFC29B4FC5EEB4B3F28DD149E638845279D
79C5F41AD16DA17EB8110197142727A5C829D5DA144285D9FAF7FC496AD08AC3
00761CB99C98E28A4A871540D45D3F9B39005F6404971514EC12CB14B99DF944
5A48C0DBAA929919D808E2759C110694AD4A2DAACA192E1238F9D60E302DF2DF
158DA0A7F25D83AB05959E694040B505B3F0B5C4CE3CBB1DE5A1A15C943C6A92
0E8E2E1D6795FF71651D2C1BD360D2D3A2CF47A3F66960009A11B4D0E76C5DBE
E655E470D2748EF972015AE4D8BB65DE7B0CB4DACDAE9FB5632269AA60C6D909
B9DCE3181C33FFB3AFF49BBE4999A6318ECB4270C92D7236CD1D1960CC8DBE8B
89FCDA4931E0553DCA2709E90B884A6A325B986DEAD58EC26A2D26D003FF8EB0
66C37DE9A2FE3BD8838F5AA92E6EEA7D38726F2A1891340BF1DA9F49EDA513D2
F3775C846C1FF57890925A192A2CDA1BFDD81F7A2FC200569E38A3CE8A943EB4
55322A87C1634074EBEC25F494495DB90852326DE98A17CA6154B18B7D052CCE
37622B96B267D8B04CA8D3F2307C8F88CBF47F32CD5EA9754CF0ACF320513D31
54E07738A2E39D6AC9429F1A359564B3C585BD959FF8D0CB69DC465F32137D1B
4A8F90B279F2BB7F8E45CB2FD9AA2EA98E381A01BA4C4E317476249D5E6C3113
8546BB8DA583B835BD8F8D290BD895D5628A9EE410C1781A4E2DC6BB8CA4C96B
19722BD65B5B39379647736EF99D7610E03E2A71698F9D8B968FCFE74292611D
F6016684158051E5C570C0040477F7C98281C0742C3DB9E1FC07FAD85429755A
D1CE06A98B3712D0B6AD62D9CD66EDFEBC54388F6A296F42C634CE59E1C3F70C
7D6D2D4D97AF75553E5C2D06D80F724F14E6C7CCB5567E147112994F680D770D
96B1C9E3593EDF2803AAF8E7F0206FF63B61F9C8C48DFFF960EE62E049E6D94C
E584949B064C1AC5197AF57ABE1BDF7921DB656BAB2E2CC448B466656B3B9FE1
0A0E27F605C0005570FA47070FC79D86877F5A1E6B0EFCE23A142BF2A61C072A
22F9D743F680BFC88002CFC7C9922DADE3577BE70F3D4D71719C1184331F4F3E
8ABC368A1C294852CF5A9E57B5A52F969561E583AC8E76FAF802C174E1A50B70
3B5A9586C03FC96CCC50D633F0F9BB8BBC097A375BE1F979C7A902A6B98C7B45
4AA9D083F8A63723F7E5F750F0DA9C6BACA4A3EFBBAF10B33F5EB9B78E996FA6
6849777243B0DAF02CFC2FB924340D570FE840E1141502C1218C55773CA3C6D0
4C6A8A36CFD52E35476EDDFB262C71A697E8B15D3809726F9FFE9D9192B03A57
8FBC2A0C9903B5E8B293C2B3B668A1B412502AA76AC1FBE852B7993E98FE31DC
936F3C74EEBB536527D13E789C4D1AEB51A8612828DED34F8D4976BF20141554
87DC65939F04DF25603E4E215532F144E92E1F61DDCAF0E017BF689AFC47D623
761A3ED8315EFC8180D08A531CF21480028F4FA46D546E5082C7728A93DB5814
8E2064C500AE5C247B74CC001A8D44DF11AC6F9CB74A3F3A373F538CAD6A22DD
E6CB7823CAA8C4DFF3B5D276EFCF0BA6F0173EF1350FBB1E585E5EFEFE95BE3F
BEF7C2B2476CE98336D9D7487F83F4D321E4E9D53B54A745A9133703ECCB262B
7DD2C8AE50609EFC083B3940C97544F888ED0A64E9527227DE9FF96147F75025
6CE1DF6441DBCF2316B1F56E785B2C9568E570A8E9594C1F39D7CF54F8E844E9
F2E6E0F9B59485264D6153646634A1ED34A59D5DE618677425005D32E05A0635
997288AA244B3925AC7BF90BE8C0EDE2D696E60DFEE5F15D5EA092DCC4D49B15
72295C65499F029D2AA21FAC8A7A04435ADE6E0E23BB8117683876EE0F8E07FB
898E46B33A5B0338A896F9B5A0FB2A812661F0739EEAA44785B6DCFB66FA03A0
BA02A2AD093DD445737D6F2C23F5B212999D21D23CD222BD230F6CB8D39772A0
6A03C92068911F33CAFF807F256B31120CF711DE24CAB53C624DB07154DEBB52
B79035787CA842053C119ECEE2F49FEDA0BD3F3C7D49723CB3509F29909A009B
6625CD539E909BBE55F557E7B7B72FFD2F1D3C3EE5A5451D2E3B991CAF9CF555
915DD250546F22F9F42CD1A5AEAB3ED00E79978AF8885E335A3E0F3980CE20FB
2C68043EBD3CCF928E78517CC04E27182EBC4DAFD078E2C58CAF3E801A744B19
B1396E6AF0A06511DF6B555D766F2B01625DAFA59673EC0C585DB1F6DDA8404E
D88ED13526C06FD5BAB6F240C60CB920F0556787B430782EADC80A147BEEA05C
89F6979BB74EE15A9C885CE8F88A4B66F7234414B2961985E062B914E17C2308
81F344EB9CB62158614EC7BC09212A51FE14DE1E2F1297F9DFD77986A28126BA
9BA96C0BDEA67A110B9724F00B6B5479A5D7AA90F71AF43F5FF1E1421A82FEE2
38CB19DCC3008321CD9A18DFC83BC9AF3F6CDF61764C4FF2704299717C32A6C9
15307472EBDE6DAB435AD469368C91B2F39A2D36770B16BC77878813264781F2
9DD88D75662895F233C7DAEFCD3380B95BE08DB7271CF5E2886D5EFD6703B1D0
5CFA9D106974F1FE9DBA6C044593EA9F4A341CB737BFDEF1D2D8C7A895B0ED9B
D97DF595672669B6999E779D072B453FEAF503101BFEC155F70848BE264DF45D
200BB89F7DCA5D771906749CCF9012B743610DE408F21B043F90613534613F48
CD919905173A8A45866C3DAC88EEB4E48DBD3B7C4FE12F626498A0F0C35555E1
31200B919C9823AD381DCAB269C64B9C949579733ED73B49F038447BBF4420EC
B6A1E600E285058C6B577BBAE1A20BF72FFAE6EE3AF85762C3F8AF0B36ED65CE
1B3237B6A22731B40CC3390635AFD99F1F567F7D3A662D69925649C58346541E
BA781E7F3B407F69A49A00D250E23982FF145E0FF038A9E5E179C7084DBD1C45
ECE0F523F880775893BCCF71810A60F93CD4ED5AF13AAD38FF5FF36B511756E7
8281A17F65F608D794C6CD86B2318FF29B92FCE1D5130A1B4163D17491D68DB2
9727C598D5EC0563D4E203101972E07D6913B4EE12FE6572937908C4889C7548
4FDAA721E9606279A8B024751443CA76A55D8A52A051B08E2ACE4420DB6AB503
D6A73A25A9681CE4277E4A78180207B40680EE8E108E4825AB199C816D3E30EE
93F94380589C1FA8FD09C97E1A34098DC1CC4111F1C79584A77AFFA47C71A0EC
217DAD7D8DB956494E60092DC6D54944FA2FEB5EB485296CF76874B6BA7529AE
5DD99A1D6D45861939FF849BD692058B915EC2B03AF1671BC0FA41D03D801F0F
63468F0B7952F8BF1A6D23A429BB27FFD6BBDE648CF153E2611A887D08DA0870
8A42A523076FD24724C5FD4B1BEBF99350B970B3E572CB0922D1792955BE8D26
7F3DC0B4A3153EAD965C7AEC7B381623E5DDD98B55CACEA45DE680016CE11D6E
C499292EE575904FE314E8BFC21DD3270184FC1A29943463DDC4E159E80BABE7
D99F5CB523BC430DAE886E932ECA1EF037E7005F97C431DD2D7FB54D8EBE89AF
1BDC3C70DE763371020FAB93FB7F8CD3109D1E7DADE762B5A6213EBE2423A930
B2D709FD865349B7509A39233DDA0B0A2E5CB919873812DFA581BA2DE7949936
D6F2906BACA1E7EF3D06302001A2C6B67CB7FD3C34750A6132636EDCDAF948C3
5FFB775455FA7CFF1EC6F88BCBB681750A9B59F3176A5C5A45C649E55438C32F
594122E63CB3DC3AFDE350C977F702785FC4D548C25FC00628799A8F91D4D63B
7D01D203EA0963E8EFDDE66F7687D3EE4AB64AA6FCC3926AAF12D10693A34D33
975507E561F949A2089EF4A677AA4C9C18664AD50E706E8760A4DDA39EF228A1
243DE6979D17702655119A0FC4A9CD66DBD6C225B46F423CE6C69DA85AE55CF3
F5F825F11BAAC7DC1F108A8D7A13DEC3DD59B5A7DC2303F2BE846C903701A74F
02A2B2298F01F19F29173C4CEA61E27B6C208C6EF6369EC51A295F6DB3A9584C
641EC8F497B53FF9BC74144338EF40FAB720A2E3CAD9B9C62F7C860F06469B29
970EDE4E2C2F75E5044BD6E95A5BBCB49E69AA1EF6AA7EBDAF80280C2A5AE83C
521B1FF4CEEFE05A81FD1099E57F7E376CC55FC9CA04E89F28569428EF51E07D
94B187D72A93FE230E1F31F8D7E99B10AB2E766FD829378D96203DB45E7253B9
A0FC6005FF40974522F50D45F7E5690133B1581A6CA92F0BC7F56C7574E807BA
26C394439FF862BA6AE84731979531F2CA233E042329F8AF409D07C60729E3B1
722FCAEDCDC85AAE8C428A02A276ADE3C52545DE0EC037493DB79EC9A47BFEE9
2D996DCA3C9A8755AC35BD661C27B413F71FE3D800F41601EE374DBBB2AF1B24
8BDF58FDD05288C39D84E0E9778E3A86D5A5667E5AE5EF83E754613969F20133
BE0EAFEFFC4C1BC1A891E6D6AA91A0860F190652A4E425998BE13A08ABE48F0D
D1D4116EBC34726FA9CFE6FC89126BFF2185502BC8DFFF63801BE935E1A88F8C
49352F8C4002F172655F3433A8A2795FE82C2E773514655C48C2FCBFA7C7A7C0
8C760C8C0BE683BAFEBB04505F6096F84B6045F4261EEF6BED8CCD1E4D9C4D2A
912228266999ED454CA7CA650061580DEBA3DB1E042443B665795BE1EC4090E8
FBFD6315B6FE7920F093EEF73D852AD6C2C3B145453808459F3DED9775AE0EDB
917C00CB6231E7E54E318FD201D9D6F462BCEE706C2780E967A5C9777FFBFFE4
15FD9DF79D4DEA0E58790FABA0C2D25CA5302537B779D0543FEBB3FA3E51D6B6
6E5D6E6C0CE32542E5253FE5A960449A1B19DDD3634F5805E73CEFC5AF1C7A69
6A98BCF32E3158390D07FC82E36274C9FEEE3FAF4B4ABC0445EA47BE76F26E88
81797A34C961D3AA4EFB14CF30A387010A0816EEBCF04F1B1D287291134D105A
B2CB34DB5F1293919F35156F78643EA6AFD41E1B3B363FD9E392938C05ACAFFC
15AA9B91A402EC4D0586B646511E42F4D809D86AEAA02FF40FAF7338D77BC951
1F9D264BFD446DEE993106F4AFE5745BA4A06E410924A1418B4B8D480A6C4904
754D43A0AED3E28E65E4021C6A8A153C80E593E7F9FF43B9BAD1C98C65F841E5
E3A269FA4BBB6459683BA4881741D6D19E6D4C9679050EEB4758C53F154845D7
9DC35B02AEF42449483D3036851723C7CB63B63CFBDCD590ECA3EF8029E62A3E
90635C6028012240DAC4A8E0406C28DE1638FE9E4D9954C02A01E77BCD6E9F53
BFC7CC1CBDAE2D21109CA8CD11E1702DFFA6720BB673E4DDFB605D3618B7320E
4FEBF025DEFF64DD4B55089B9A6326C88CBBDE3D629CB4BDF15CE7C10059B573
C3FF60050AA2E19432A94807489D049A808DD0CDBEB340F314AB72D51C6C2F5C
2161AF8DE183ABEB504071A0A084298B28636AEC8EF4E2181A3BA929076F7C7E
994EA7902FF5F27BF7F30343BC17CCAAA1E9CA732B4A9B6D38124BCC6528CD9F
86E769D17CEC8830BABE5C38C05163F57E8FC28F9F64C37FC57155878C8B0D66
E0FC2FD37984B6B44A4E8CB97850636DF393174704E819A3B5DE4C75928C2291
D2EA2BF7995852A53E09F347BF5C5F2C41C8003C47A1577169279C849E5273A9
85CB745676F878335F7C31713AA85F9F3868B466C8FB0E6843BBC79769E5AC50
A9534511D08883DED1A92C7B49503DB5EADC03274A06B2B8E1E499A212F97BE1
11FFA48845C0A7FFBB92FBA64A05FB52E22955B121AC713ECF91B86CBB65AB8F
047A307EEF6047A4467E56A896BF71813D6CCE99CF2A8B001BC8296E5D1FF941
5E16D1EB9B65D6BD5F39201F62B7E14D954CAD8DF6DA17F1B4ECA443A62BD96C
6FD2C2200853F660BAD6C22FB5A029ECE4A76C9E4A6FCAD1B3DF469DA55A1C61
237A5D8E44ADEA1B87E68E8764EAC9623E7804FA94F723EF0529FB7F3DC6673F
B71E9D7EB7303AC408EF9669CE95E69932FE7EACB20CAC2C03980E336501AF02
9E0CA9CC28826C4C53A98219E79797A76A7DAACE0D4F20D4DD78AB0A99C95A6E
D2BCDB1745C75708A4FBB5B4BB2A2536B5077720D5F47097FD1C046DB1827C6F
2799B73380F0FD38AC5040DFA89712EA76CE8A6336E1FE7A7489F5B5325EB452
40BEEA72AA5E2040B229EF7247F4A93E416D856B9DC2D7A4603BC28E2E7BF13A
CAF9824BB87938FD451F21BFC8D6BFF0B8A76CCDA7F343AB9A7880F8A51B77F4
80E6B8CD7B88744A004D16230FE240C4501F3A346C10F15ABC16F8E7FCB6EEDD
DBD1A7D719519357F34FD0D2C9CE3C43B06EBED2CD6BF8E7E38F5FD0499509C5
718D016826E1DD43F74B7401EF9E412948054D81B411EB07EE809D4843A89345
DE6049CF44612FC903F87D990B0B20EB7FD1FCA35142B6EDDE1E15357A0B3CAF
DBD9161A5A0C0601758F64EE2E3374A8E8AF9EC11FFD1F4D0DEE0B57EBCDA134
DA7564E9AF36627488A3F4480CF6DAD00B3E22C13F451D3A7D8432A027938476
3B20DBCE744D65AF8CC1C2F5A6DC931165DB05019D4EAFA989DDBFB86334CF81
F619F3A4B7747D37292B3222B01BED849B1237C7799F3365F87CA6FA89D6C59A
AEB4E155976E0E022E9CB25AA897AC7D07CD84F09753E37BAB97757487603833
90FCA7C380779BEE3C1628EBDCFE8A539FFB0A5F42EE675D192841B57A93B627
626CBC95331DD2BD191CDF16BC1CFF6208561C35C2807722BA6A887070581AB2
F229041ACBDAA238FDDB4282379B2F37F0F46F749761E39F6C8AE1B402629BED
D7DF70B6B845D08271628718935B1A9283D0F24A81ADED280C116BABDFAB5598
0494A83FAD890E446F1E41A1519E550B0105AC69944F8381F0C9D0F267253C6F
291E4A41FC4DC02CF54D84414A3250EF0769C5EA2E30D426607D5001335B9F6A
BF25248473DABD039C0087EA38B2E6BE85DB8A83F9A7293199864162486F72C1
957DFE950838C4282561F0739EEAA44785980561E18ADD31F00B22C254FA641E
37DAEDCDE02ED34A8926D685231312098E8A419B1CFABC7EC23045C4A808684A
7BDDE0713AE1118698932CF64AC12DF60CACE9522AA81F2280A941ED02162FDB
B1BF0FC6DB0E11276FE42226D06F37B8E491B0954654967FA6199DA6FDA3D76C
106A32500584D95F1D666AC0A7514CFD4C22AF17F5EC69955D1C01B47FBA323D
D20E600A500DBAB8483D01113B2BD7AD45DA0A07A86AF4A12CB3EB8EBCE33CF1
CC6833BD3D24CACF1DBA04234600D93E3B0066DFA9FC6CFB106BA842229DF648
1E90F588A23FF91433D0633479511AB5F578A5582C92499E8519900EF5DA7797
43C4045F4DE556E991FAF2622ACACAC31F37EC3D5C32E8E934A39300C424C0AC
75788B6B6782E29DDDC7A8F3B11C91EF583479E6FDB6B8326865E4F5D6CF2528
4E33AA52F71C8569B7C7BC71FD620080510129B16A6B9F57F69FC1B4CFD5AF48
A89122E00EC47C3E004581790A52E427113363C8924488979C1F71771A40BE37
04598E2CF8BCDADEF0BE20D60C5B8ECB6FD579D79E3DA40531960CB1B2769164
D14208BA8F95A15376B46863E6AF5235604955C27C1DA37117D6CE64599692FA
B00B994487B01353E105F24CC03C692F5412D16191CF8BE63A0ECA4960A34863
F8E9BA65BF434354343B881F5826996B8B2C9C0C04FF1BB0FC835B5FC9EB3DA7
EEF679B77E7F92A2668F41897BCE03674EBF8C289D66EDD30965D9408E0DBAEE
909CE0B69E88FAD9DC463113F6474EE1C7C0CDC26881F39416445BF89A373339
ED1AE85280BC269455E6D98A53341CAB51F20C0327C10A78F7F61D8102F8E416
1859E1EAADD577263F336ABCDA93A7B4CAD77C0C2A532C93A85B6DC4BC2C71A8
D3FBF254D47F0468DBA44EA20C4876C2A8A822E05D5E282836DCD0E805470C4D
4754BD9FB03029B39C5BA0DEBCE839C75C933C71CD99A9987E148EFB725F9DBB
20834C429B4D678A1238396A600F1DB2D387351409A1BFC7D124E3A3ECA62F8C
92FF6B29DDECB9BC3999A8C18F9B94753256B39D460E5ECEABFC43DF9A0143E2
EC5DD12F07F15E8595504D7E98959C2896787E7027B090212931DF30CDB3F772
F1F450C394B42D809DC33A8120F44B015FC53FD42987A6237E379F3EE1511854
80F289ED9F1A1B0D3B985853932F8FBB0F81A4D16A75AF142526A91ECF5DFE44
0BEBC593B844B77C3414B4DE58F062A5CAE27B099E0B05591659BF4F1FC9694F
6CD69BC0E2F0CE97012F6C360DA2ADF2BAA63921841442C9BABAFBCCFF449E56
C3A419AB06A1286717CB360735D79FB22B46BD5412B99939F10965E29D979957
04357B5F9F4B72B683FF3F30B6EC51C08D256FFB3F6B88EBB59502170BD7DB86
D0C7008DD1911733FC6E30AFE0E295FF72F3E6678C57AFE0AFD2F7DB049F3E47
8BA778D665C403830D15448D35CF9753215840E54364F51D4CE1F7AE37A75CFA
B89DCE087A0498D068679E9A5DB60294ED45556EBECAAFD86DA55DA6250F97B0
1B040B31CF1DF499D8120736AA527EF9F19D2B119CCB565217DD35CB4B308966
0DAF2EBF92FB3FBAA4BE2304C7EF89768FC24EA2E8C31C43FFC0B3C99B96DF3B
D9FBD468396F98FCB59684242D4752EA5CDBB87ECE6A9CBBB65299E4F57173EB
9869DF4EDE674E180F10386F9B215A91A11C5DF5A9177FB9FB43D911AE64F01F
7898F5E19D89263ABAF8AF272BC3142F941B8257A2A5EC3FB8997BB2FED62180
D7B360E27048E23286012D3BE8E6C92BA8D48DC9D4FF056AC7D42B9E67AFFDA3
A48C9C280027027F37788611C906E56DE97ED7B5A0A7C9FB828442495DC59E92
CE5DE0D5C00D6D10F13F7C59413DA4A64B2804DC25BAF049257B2C3B189062E2
B68BB61D2FC785CD10C1CBB5BE30614CDC023AA3701998535DE21DB6CEA09E36
3852E5EFBB815AC39280DFAC405EF54890B624158162940432E40A93754EA4D7
E06164594EDB9B449997036EC573936322134F8E3DF6402A621C0FC46FCC2B14
BC6CB544179C665294B78B3EA22E56BD9009777A8FA5AA6F57124FB1DD66C781
4838665A3570586F06CD8E54ABD66CB5A68FBC32016D50F04E01881B0C0F6FBC
6A7D3668E337D8ED4B89EC68F43289166178D26026B734D6213663C09796FB69
BA6B6D732C408F960D07EA3EBD88E5CAC36EAF394A21FD18480D11EE6E50D7BB
21406AD54CCD6665F58AFF7EC8D85AC25420D7BE617A1479566502BBC43883C9
2C60EA329075C3F14EAD1F92976A7C797275F291CF7D53B61E41119F496E35A4
8EE7FC3A7500BD9766353D0946583D837A1F42C453304B684E2735A4A7458831
A74142E74CA6B7ED03497941B4BC96679E825A7EECF65F301C502BB65F516B06
D01C3C377D038BA9C4CCFDB3F5F4512E39CAB5
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 39 /phi1 put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A9081E7BF64155A2CE3C0DF7
88D00671AD65654709589BAD7EA65BBA811387ABA5CA0BC3F66D3D48597A0D1D
2C268375DF47CCF62166262AE4840AB03BF49BE67A05EF66328EC729F03CA5FF
AD3937FC053E223303565DC771ACF32E63DFB96D5030E787961D72D02C195C66
B48E9AF0309DC169CFE8D16E2818DA94693A18F027DEA0D916672480464F7E22
CA6E431FE38D3FC019BDD229E064B72C545C61C6EA55984565CCA88ACB01F744
3B4593CC8944CA80766DD67784570B6F13B70B356B623D9DB9617933450DE8D4
9AC0782CE1AB773E9F1CE6CF678AB3718BB59B88C7D4785B0000FA34395FE4E9
CCAEAF475956DB8F40C20E156ADA6FBF96203EF768CE9C148FB7B4E24E4A5389
EDE9C2B88FE5CF45036D9AC57B1725FA4AB57D37F15E94B6DF408BD0326D8CB8
544E955C7045DE56F38CC40CE30C17151EF5AB8D7BF42C8E51C7F74E5A4C22E0
3B6AB7A7EDE232A7A5310C69D4919FE85674C0F8FDDEF1AE828DC910D2F713FC
3C666BDFCFFB0A97AFE73F154AF002E5A17DC4C7C123C0079F0BDEA4A16F5F96
F94EB91F3F7F0DF48E6EE5606F568D6C028EC41B37EC914BCFAB3BA0DC9B9997
F5B1A8E58FDE6CADE1080E96A2752C438E1C800DDE4F53142A4DF237171E2C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: NimbusRomNo9L-ReguItal
%!PS-AdobeFont-1.0: NimbusRomNo9L-ReguItal 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Regular Italic) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Regular) readonly def
/ItalicAngle -15.5 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-ReguItal def
/PaintType 0 def
/WMode 0 def
/FontBBox {-169 -270 1010 924} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E134D4CB5ABCED39AC635
DA001E9934C198A7F9B9ED0028A85E9AE00421DFD8EAA3BB3B4B4CE45D209303
237BD51809FE4D880900B1EEB236ACA87B9FF6EBE6B994A60AF5D67CCC42BD56
77295C346EB4C62BDC1EF22EE07DAAD928DFB73455F091F32408ED6430B97417
683AF27A03718A156E3F6E7B6E4F2E8177503CD82DDBF4557A3CCFF4C858AE7A
F7EFED6CC521A28342436B953E4650B5792BE85EA2F989EB6D986905A61FA38B
96E1BBC830B74469150FB0B598A794FD80D10870084A877273A9502C3456E5EF
74350E6E3BE5863E8BA185EB59FB87B36566AF71200B6ED389D1287D4E925E33
B2383ED05D87D48586E698FBC5D562ED9D8A09EC3EAA1B1F300224AF20C23F26
A2EADC74562571DA84B3914D1D80B127C6FF4706C7046BBB372A0013E0AB94F0
C27946583871D272BF4F20FA84E89D745DE7BBA885CC09BA72E0F530ED4EF7D1
864B3C67007ED98800284235372F0A70C912E21E851AFBF812165B8DF912CD1A
013E271F0B347967876C68AE4C4107EF8AD1F170916210034C66394A9D971B68
FBFC1131E37FC178EB97C1B2A0F573ADD9D7C0BF944E6529734DF8A7EF54485B
A3375CC30E9E328943733CBD352BC15B06C85BFB4A96994291C72A0EAE84FB01
0F1B24D0125FB8C16D60561DF8BB7AA7DDFE9549AFB70C1E89424214609FDE41
9A142892E30F02754FD234CEB3C59A2A04C06BAB7AE40E8FDEC50559B8347684
391C750987802D5452C47C1E0B5F222DE9A0EEAFEE19D796FF375A1E1EF0AEED
1BCAC4F485FCAEE18AEC585D1A9D80F41871DDA45FEF1EAE82C5893118987BEB
4D9E345C27C7419FE65E4853B40537D822E34FF1E0BD2819D21EF607981259E8
9F1040A2D708D7463858AA5381759AC49DF4DDDEB209A278FE60BD2508ACA0F4
6A249A05B652E4C7BF1B676943CDC463BC49115864B5B5A6569C59D057CF2A8C
FD282B79BC3FA1308A61476AFF58D91BFD63D1BABC326C4FB78A42CA08478425
E8038116DCD68406DCCA2F5A85858019428DC1DA7A7F42131319C2B08B6B93C3
64413BF65B6D8554C69AF4C1D98BA42AA91660B2AE57BAD964F6AE9BD13DC93F
44DC05BF90F7E1C05C954ACAC42A93DCAB215675B1C7894E2A0D724B606E9DA8
F016953104BF247B66A7BB05C64AD7636D951338BD379956280919E1F6CCAE67
34BEAB789A232E1082DEA0383E98A6F55D8C71CEA9D1554E7A796586577CFA8E
0A1567CA0F3C0A445EC1752A47E705F4EEA6268E2323E3C3369D97355E3B32C3
3CCB9F39E828B8B8317E4E50F94EFED6873046F14E850D30BCFD2B6A49A29126
CABDEB8551410ABFC1BAD9D79E03CAE74D67249247577F67F6E02B76C71D6809
A3ADEC3800693DF0FC7EFEBB1BFA166A088B8F232012896F122727523E1AD51E
E1D8B35EC2E6B2BB0314FD0E2835FB97FF4BC59F9E64756B4B5F2119B20D5BCF
AB27289A93B316981EAC33605FFF98C7D011DAF6ED1AE0ECE6A43A7A29E27903
3C4AAC3E18B02E195E87257DEB8A1F6489CA0115898F910F38FD25CE03F740C9
69FCD8FC6085A66D841ADED0348EF0A843D0F05CE3F579148DC11183ADE03A18
83B216F1DA8BD7F20B32D5A200D311AD5B70D8D7A6DF940E23FDF870E2858CDB
C2A33039814B0C5363F0ADB027A201E35FB4C9C631CF85C30F422B9F568B9ED2
25D9D69B6581864E351CA800EF6352248851C763613B3DB11FF0CADCA8444111
5A0F5854EA100ABB401A60B1A27DA0BDBE5ABED44A6F0B91FAC0C5484DCFA46D
D8D89C69C886AA0247C5EE233C9B82E24919FD9C0F36018BDE9C7D0ED36ABE19
A3BBC568A4F8E3CFE795F74543F4A0DB7EF982CA4194EB2CE0BC24105236974C
892564D5763D3D5D678FA7AC5C9D8EB2E53E15F94647C5EABC7C20BBB90B79A8
21F47ED39E728C046BA482AA6199B185491196BBDE507FF6941BF214B5B5AC3E
4D781DE2C5A1D799C37EB4943BDAAA085EEEB0D95252F4043CABB9ADEED8929F
628676C8749E04FD5DEA0FB07B4AE4E4FF8711A0DFF66122E702CD92AF1F2343
29F87CF933F558E466F0B7DCE5C945BE5098FCFA3BDC3FEA1738B490B01E8242
C3868D2CE1A803BF434955DCD53070A81E553D05292B03EAAD633A3AE93C88CC
31235ED84F544E3C502EEF20262A6BD8C8C86C7B97C9DB4B61BD20023FF06ADF
CDDB3FB2C55B5B4EE4CA5383C6EB8D1AC1B96AD480DF6C530C83A8843FF053E4
38A2CBF9013A50A85A2F3DC6A7B7D03CD5FA63E3D7666405C72EE738B3D4B64A
75607F8961C921DE298E3E354405DB8099E015804028A6B8882F697DF1FD832C
B725AEC8ABB944A963B53DEA2DCBD43C58490E5807F0B9FEA8CBFE1F62CADDC2
C02317D26E7BADC9821C4FBD0EC0CDF70F847861AF5AEAD56C58A80E3B3A6157
DA800EF187845C9D8FA07562B02347CA3DE34E621188128B8B12C2B28A050B50
BD46CC83DDD732C8EA6769ACACFC919E9FB3C3D2E685A798FA77F19A8C689A7D
70BC6B9FCB889D2E0CB11A825DED6AFC88E7BF77B0D0FF6FA73D9595C826F333
231AA99F9D731A3BA3B39A6383A5CDAB2CFB5B30B3566EB48440D16A80AFB504
72F160B9DB1B4A2301F1EA27DD7817A5C161B74D81E9AAF9731E745F2BA8ED79
FAEBF2981CBDE9C8894ACA5225B265D451B1FB38DAE5B8E90EEEAC5B338AB828
11762221E6C329AD7E478B45360C4289224EC5DE80A585624818741AAC1BCEF0
6D768E9AA430CD13C8DE81EB221CFA7C10D156CA69D5732C4E6169342DF09B3C
2D4693BB8F82557847CB88C03F08327B1832DDA6DF151D7C349A00598364D8B2
82AB17C7D557E866246720901014F61AA8BE84F228DBED39693650E944A95E6D
AC750507E4A11A22B47C38A8A6747053841C0CB1523FCD19D78615167DC49A3A
AFD502D8325F1905A313714FAE6DB06182CB32A906B4B525B26E99DB65214607
F52F4ECDC9238EB07CAC4B2F45B211A00225A607A5E867D601C60088FAF1A96B
0ED4F0A5D956F69B4B2ECB5B720B5CEA5B78ED3D8AD34E2542A74A0B5C7FE79F
79CDC16D3D574A2BA2328E9F4B2B1B0E82CE1FD16B33CA5A42CB96345F3110BB
3F3C3FB22B1B2CC2A0BF6BB598B31A7CD7FB9B1E09E4044F8B2C32A2ECF853F1
279F3A446D4D12347CCABA78F3AF762C02FD895CAAB8D47BBFAD0BCE8B890512
7DA221620F8D132D3C0E21DE1EC47496ECAD42202CC3E611E43BF56927425B29
43CC4E79531FE9EF7FC51E3883D57977D8FCD9C3C699A1E439F84193B36278E4
43772537C4EFAE92A0EC0ABD9DC217A467694AF23239F912298283B7BE5DC9E8
7714F3B802AD3E829A70F23BA24B7130A94CEF9322DF0CCE8FE0405D523BD801
54CFCDC2DE5A13ED881088B6B60682F4DD99DD79DED7A30FBAA86B2ADFE7375B
B582AC084B353062263B93E463238A36732C3ADACB0EA238AB8B29F707E619CD
496F9F2F9B289307D7E0C33BCB7023200FC3221BD06D40339955325265C0D568
7884A192D357DBC2F4F29D23C61FD5E78CBFE7A6F095480314679B3B1967D855
D7832EF90A57B7930BC1ADE2F3B45CF3C4E8298845D4B0DBF3B4F29F053C4405
3E14ED09E3E7A0F8539450B6CC39248D4348467E5596D3D3CE6270E97CB83244
2EC78165E9F0918267336FCFA370BD50BAEA04E96DC81FE52304B93C8703787B
F8A07F4F248721974FC65599085DB7EB209E1E665209347D1A21DD8B65988A78
FDB015D9A513FB2A74A16A3F71CCF61347F594AE5FEF1BA423FAB5F8B8E97504
009B475EA9A0C0C0FA7DAC211E5D9EB12CD657326EF03D0ACD7A7466FCA451B0
F1DBFBF8108E4A8E279F57C0E6C7244E15D0C33D2CAB9D38F5D6D68B93151E0B
12CAA8DB4A5DFA5B3C71F772E70F99E2556CA87AC04D5FBC76A5CB889126288F
3AB035C76721D62EFB6B8269DA5FA7DAC1DE7EFA85D7E56467460BB0DE70A4FD
B21A6665ADC1E221AD274C85FD34DE16E5BF1E7556DA09F289B1A0960CD428D3
CEC3F7DB1333A4EB3C05B28980AA04D5FE47353B992191A5A26154CE54AFD9DB
3C8E9EED4DDD03E8297654FD994787FD2F1FD546FD971FAA3D896452B39EDA71
62F8DF124328D7327730EA3654D4FF8D3ED8677BBC1C623C8B086F56347EB9C2
7980CF39676E7E56032136221AC34526F4413C0DFAAD91E9C3A38989BCA56057
9F6436CCC84C9C679AFE350E0168E12BD0DF359CCD59FA104F68301671BD88D6
C5CD551068CF445C5F8015B05CBAA6BBBEBB8F6F9C08B63E2A5E7428FC3CA0C1
BB2BFD8F64E51A1017DB919CEAB585B907BB47E6B700F7BE8BF4356FE435A2B1
84752DACE1A3E8298420C5F301A172B27279036B72C900F6DCE1C04FAA4D893D
3A4118AB58F78A4BE43408C7C2F6D4465B31BDEBFFA59D818A1D866A83A5A7F1
1376C17F2D291EBE20C9AF317A528778D2213CA6DC3A62BE2D64A05860D0930D
7562F3201708E5E6CCD078D772DD8B03B8407E5D139E0C38A317608B21DCB3F0
EFF444C5D0D23F518D05E564068F252FBF712D4F6AA9CA51714523FC48BFBA13
169E935B40C6AB2076A5F474331585DB114E682D06767648F9130C47D3AA2C57
5D1C0282411FEA30AE5FF2FD1A26935113BDDE715FEC2A0CF54B070E71B61402
7D8D7009CC245AABBF0AA171492BFC36BDEAF68E25E5F0B30B966DF6EAFFAAEA
6CB625811E3DA1A464E0B961A1E19F121497AB393E0D126096F1540F35AEA9F9
F22953C62AA1B3533B173206C1E03028539338323F06B3AF9DDF627537F71DE5
3DD949FFDBC1EB5419A9DD28A2554BEFDC96EA8C85408FE3160E3A68C5B2F1EA
996FE71CF6D1E942B3C775C2F574036E13FC1CA59DB02E731D1809F3CAB1305C
72B31AB0E0721BF6B14C2F3295817E73A2402B825ACC13C5B1D171268B38732E
B1EC33A1BBEAC0DA18647BA03560E06391BDE9A02514DB9B144641A5BE3CB821
DC625031347151BAD326585A71F1852B2C51BE1ED210161BAFBF18900D5087A9
939F536CF41BEECB5AA0D05DC9B5BB3C56B554A845A5AAF689807B579BB6A0C8
F6D428943995CD9F4B91DE757EAA4A74D0836E2FEDE0121E8F51901CC93AAE2D
01F7C4701F0514CCF64B820D85059B2E3C0CE6826074ABD911CBFC303C48C620
411F1B2107A7432C6D14E581522E1283DEDC5797D48701C5B4E1FE532296FDA1
DBEC1797EDDE2F6F2B8DBE85E4FFBD1208E5F29EE4BC9F7E6995FF1DFD0D47FA
4B70AFBEA893A87A6502F4886AFA3A435718C6255124143381B7D224DF2F35E3
0C3627ABE7BBBE5E676C14B664BF15DD89A0C42EEFC171D6363910CB63D3CD6E
EE2412425D2042547CB8A9AB3E9D9539262D27A32834CBF79C388182D64B30E5
A057D06226BEB9784A43F6AED66E58F4C8AA7AD3EC286F30AD0245F664D72A86
99D2EA2BF7995852A57BC46D25DED731109C380009F29DF1BFA6AF6E24ECDA74
88211C6A7FB56A86EAAC17AB29FBE93D18817B3CAD466426C17CB31D13763438
EFB921D0CCF58B565AD92C92B172C8A40D9CE30B953CC3D874FCAF195575D847
34EFA92E17AFFF615FDF9B41773AA0E900502545E4F422F6679D688DCF187AB5
B4A6E8AFD76EC35F3CF070EA7BBE2E2EAFABBE94CAF6A8EB4715217B9FEA6990
408614BD6BEAF815EE92C92AD30184A8228A76BC6D44022BE550623EE48C0606
9D4E0FEC56C851B0CD5D9DD073C2A0A9FCAD1B0DAA7FD0405A0C4E468840F8AE
0EE4B058CC31DF40E60658CC3787CA9046B6C0936D14C91DA514E45C812B2F22
82AEE9DAC008071F430DBA9EFE36F2142A6F6C8561888BACA0E814041FC50F9B
0A3DF60AF84E3C2F621C38C0CAEA89B2273BF913092078F31BB1DD166D0766DB
125C7F80684CD51E40762A109DA8B55B5F8C7A0AF06DB26AF884F5A45A2CD080
364F5ABDE9C3736FB68D90C450983580DC60FC291F9E95A1255601FDB3546BEC
C049981DF20C2E59BC719D5F64F0D013E2261DE27D6FE9916CBDDFA11D9E665D
DDBAD8E89B7841DBC54E4FFDCF82539A1D1386D1FEBCD2853E7CABC5E91796B8
85176789C68DB0AE8D8FD27767696A71E401C3D7EFA3F6906958707163A723A9
E71F504DA5D447AFE8CFDBD88089FA49C836C057CFAAED3C30CECE4F5E0AA2CB
124A3E78305088985BDEC27230D296605C3E0A503FA135923EA82601CC0C0F4D
74BC69B7B6640AC1DACEC9EBB904C13D07B55319399BFAB7997436CF1E50E824
CA1151B9BEE4237FED8B3AC810D42A2265FF78FBF826C6E41F4B71945D3F0043
8FF524D90A0AEAD1007486F31C8CDE8E0820F95205C8C7B7C82E90B8754227A5
90CB526752A8572155E5FEE389DA26161D22046FB7CD6C789960C7B1A20084A1
D3A7E4AAB73E079C65AAF5F2886D3A2FE613FB35BACD74E6EF78FDD3001064BB
5AF811B877434C861AFE864404260661B4F460F64B9DF6D492DEFE07126D13DF
D4655739177AEBC5D91411E84DADA52D33C06971911C845A7F4815CA118A1F4C
2A0A2E071395EF9CAC30822D4A7D13A499BFAC6D56F51A157AF15E2A2528ACC0
485E7F341392EDD34C8213B032991B4970B51401ACD2EEAE8B470ED6876CF567
3C9C0F56BC2D09F340C05BC5CA3F7904215440BCD6335C760C8F993E3E7DD96F
EE6BB1D5794B69BAF7AF3D970E0C9B61ECEC564DF6F71596319EFFE15FCE2B91
73557BD09FD4B70CDCA7C8FF82B7CE2B2A34C7E0359D0ED47D8BC750AF36D7CA
FB950DF5FD1CFDF348B8A1F08379922A63753A6E3986D608277C1B6C547F3434
5D97CC39A06F7A4FCED47D16F4DD27E8D2763A852E48F3FE434C00771C407278
A7B62A0C97D347F25470C06920F01F47CC49B0A5673A733ABCED0C6F9AE3DD9B
8B053CA214160E8736977F6B1FBB32947EF529820FB2C87646DFCB62D2ED8854
18EA3583F3A716C0B445B94B503EA9A35CE2E93352AC23B14229ECB5DC2664C0
DD2326B351F08F50777DBBBCA4367803AEC143124B7FD6C64D62B948BE337653
DFA3919067E4081919DE59D3E78A9CB5BDFFAEF5F6F9AE158ABC1BD5F9F23838
97335B2479B064A7C3C33A7EE3F6F3022CA7C9CD80CAB17DCC12ABD3697AA8BD
E67D2804F396CE83F0549889634E92F5E30388380927E5F284B65FBB9D61EABC
44181F3D787CF33889668F4C3E845795681A26F260E6957AEEF5C17D835F220B
C877325D5344F13D6C5BEBC51D44B9296120E63DA16A6A42182990DD518F596E
5EBBDCC488668384F7E69C362394A7EE5944352178ED8D8B22A53CD932CD0DB3
A9D1F9B026C9C1486D8B87D58651AE2A0DBC1008BBC54D9FEEE1139782DE7E2F
A77B5A8A81B3F336C0E545DF49A89147896B0DD7CE8BC5E8D09C64D8829B314C
DE143C0338BEE212257833B7B46ABA826DE6A6C17253F42FDC5CEDEE1B580131
25B46EEBC992570D2C6951438E3F28B61231B5D78762E43ED93064521980EE4D
42FC3DC0960B055900D321DF04CC767A4A6191E9765C4CB18641EF279370B61B
D06AB03209DD069494215809788023ABD27A0623CFAD5C65FB5027A8B79C91DB
513F22C20E2841A496CB5E88B8A9E00F03C00739B104A2E1998AF9EACE2D54BA
2FD25DE56EC12DA27594BFB4C8D2CF35E509088C6B7522D2AFE0E790AFB3B22D
4022043E30F4CDD5C08077E3A3CA9C877525002205BDF49DE44857BEDA9CDCF1
F7AC034FEE42A111EA4B21D6444D2F8E96809EAE7BCE9A7AB53A992BC56200F0
68629BB44BA5C5B5CCB98CF5733C7DB4322C42803E3561C7280015771261F64D
2D8D918EB1A5A2F7C66AA06F9C88B0A31CD380B8ECAD2E0879C58516AC14AE7A
BFE7BD8676ABAA988BFE829A39F35F17A838A37C002866315D5C2C0805AC92F9
1FE18D71695F23F101D30BCD339D851C3FD49C8013EC1ECCCDE3EFF981FE73E0
45B04C79E1F6F78A5B8E2CC189B691B49F658A3F153B87119321545D9098B1E3
5FCCBDFA407199EDA8ABA948E687EDEFE73A9F6CBAC56260EFAEDDB6F71B5422
877C8758E04972AD163D3507F33632ACDCC8425A141D37B1EBDAECF91FE83288
9580FF39574FEB6FFE88F4CCA7F9BA5AE194ADBFD7FFE6254A979DC5B17E3D2E
E705A9DC545F5E950829860173524763A781C90F46D64F7F73ECC690D4F7C476
436EF1A918C02FD23BFF8B3972174DB5AB57BAC4868C31C0276A4A3F62BFCB3C
9EBD7D711F7608760FFE65754E79F191675B07E3A5BD71CD0F4D80398084D046
45675A76E2726A7D33DFDF8ABA65971AE2A724AB0B06E2D07714D5FA45F21600
E0AA28A6B65BE3CC7CE8F12B13FFF3B4A08A0880510DD961E403B3D975F542F1
9E9EE1EBA347A409CEF33DD42F9121B178201D3D31032AC8A1BB77DD481E807E
F825F484170AE1AAD917FA419662D95A579ABE56667A9B1875C8189563C10633
41E30B49E0AF725F33C1522522D8B549791F979636BA68231730C7F28137AC3A
0D90E781E785AA1CD03815DCDC675CEC58EEB5D5AE5274C223DF459A714F0F72
207FAF08E24C5D0A20A385910CF5CC9590B7D4117B11ECF7F492AB161F3ABE97
89BD4033BCF60A4545E40CAA69A5BA421F382275F0C4E4791A6371735299FB65
77809F2EE79138D5B9FDD43B088E0293273AC148E51677074FB6F90585C75CD5
1EDB22B4AA3644E0B7B8C88572F2AB65B7BDC9F704E15D8F7E4DE009307129C0
4630915B8CE43228548E00800DE1B6C627488ECE13872096753712685E241C59
2703315E6CA03D39DCE4DE2127BEF13606F42819D52B47DCCCE8D129A4C05778
EA6E4A744FBE1728BCD3F6C1BFD503D55A6A7A6376AF4D646B2BE1242CE5BE6A
645C2653FE55D062B786BC3C6651B6A450643FE9AD227EB88E279912B638563A
1B51C0CB351385FC42EDDA137E5D0310BE802983122902301AA930FD4A45F3BB
CBC0EF7AC86FED4C7CA29BF669B44C00428390420C0CA756B08A0309EB35638F
24A453E9B9EACA7007C99275B4356BF8281F2D2B67B93D54B1302F8B2B9F63E4
524A42C6CD98A11CF7479C330ED83DA40F4C615A21E1CB8EBFFD308ED23E3E0A
2CCF4F50CF5DD18FC8F3FABED83A76FD8DE3665D7A072513C78F71FEAAE66E26
F6DE9C717E5F5103551007B28EC27A109FEF9F21125AB790054C314E13BD3998
8108F6EDE1080D905A3C6694E7CD5E837BB6FD8976146C7B55B5F032F85BF380
BDD94D2CB53F1FA77EA74787017E92DDE4CA70E9A40AEA34410A8D02E2EB73D4
E7D573A06A88806F4661B0AAE2C439A64DF410E3356C17E8E7AF67C80855E052
CE13A3DA7FAA68D7A5407E0BA263CECAF34FF58FCCAD408FCE90EDDE7CAB9B11
1BBC5D7BD04CF2DFB6861BC85CEEC040EEC0E9A6CC520FF3C45B5D1F4889E4A1
C039D6CFA1ED0E8D0E067E2A3D0BE8B2D378E5E3EAAD4EA0CAAE62D4727BFCAA
D955DAEF48CAE860C4E1AC06A1EF46728C66AD860BE59DD9C26FA72639FB421C
3457FDC09D38794621936F13388CE0AC08ADC3134D1F38F37B025300E356ED4B
4AAECB28AB5E1CC4FFC422917E243C440FA84B39139737C8CBC667F0052EEF61
ECAD138AD5B484A28E244F84CF92C4CC1FEA9BCC5FD7C550F0399CCEB87DCC57
023DFDF9ED71D4E41598D5D59389340D67B1EE8DBACED85F3505DDBEC9D461A4
04C48EB8D3F16196B928587247D9A2983028A46C6A500060CC7026F32A3ABB40
6D2F097A654FDB4013212106D464B0FE966C9832860E78813AA05DC6ECC02F16
174606AB2770299A4EAE74148EA973AB3EAB6060F37CA8DF33446E877BCE9766
80AF582C664D35522EADAC9FFE1131374EB2AADDB2337DBAC4C8D3A7A81AD20E
8FCD66328F497DDFE297ACBE318A77656767FF1A48838221A3FAB6E8027A1087
3C0448286819CBB79A5BCE21BFA46CCFD6B4158BE06C768C73F0309D0795C858
3B1FB0BC61C7A26294870255E4A960FA64D9CF4A70145D467EDCC0085445CA81
5B0FD701A99E3E7673EB33BAC9C62A85B0FA3BF6EDC4C6BA8863543EB809ADFC
C8150795E55F00AB16AE5D566BC193951CDDED519329370B027B0D14BAC595CA
2EACD307F9D7F1EAF616D1ECF3FA4E20359B673959BD6F18A593F7A1CD2DC35C
E333AA6F27226C1FAA69767D1762E8CE8674717E87E6481789CD78F07A8F7E11
ED76D95BB8913D6B1CED1294CF91A25FF02E328B467DBC6DE762C8AFB9093A07
E484F10BAD7280BC80FE1C317FDE765000BCE9D39546D64AB4ADD0D239DEB2AF
68620EB0187D7C3B586F1592EAB12219FF5FBBD26E90593429FA19C847A63933
90B67C0AA745A95B803392EB403FAD58997D31675965503AA3474FEE81595005
2DCD91C66ABA68B66648DEC7BD857CB30A5BCBCBA1520BE9B7B21E57F931C1BF
2DADFEB5B6D323E0B94C685ABC2685403620AB47FB723AA8AFC1B08B13CE5C4E
6B0DCE041F146E5FD516800C66718857C744BC69CD210B5F69B08B19376CE9DD
78F66C633D213BC858595C8EFD983B54D81621320024B3C14EC5BCE3094AF357
EAF1CFAA6BA4836CBB5B2C9266A57FFA21859B0F39CA89F916528313B34AC343
1C2E550C3DAD94B91BDB9A0BD8D31295BC330741D6EF9C254CC1D997C0428152
044B0688502F0FC5C75EE1D4B4A7F0EF91E26B4789B6FA1DAD6F46CF5600AD94
147B0B1BC26A460818DCFDE713416C79BD2809EC86B204ABAD129704961324E0
0BF7E5D4A8967A0317320B5991962DEB4302A0F88AB03F9E3E1AB8E0E568EF50
7AB94E4C153F26408576E217C756B1E750BFD7953026F53F2479C6E241A5554D
BF0C2A226014645BC0405C9D0524966490981E8BE9683061B7B54E2728AF119A
F94B32B0D796E389712D077C6CE3A65A02AE160B144E0E42D7E798974E15F69C
CA6E8FFBB6360638A6BAE03DD0A453F535EDBDB49E4F3BDAD78368DF5B6A9FFC
74E5A4B6AFD258DA4378C9DE9B130E3BF16633392DE2EED68715B3AB52F6D56F
6DF6E3232AC3FBD9A6EC525A8EAD194F25FB87570360EEFBE950CC9D4F8E6A0C
E0B959315F441850F8FFA0B25C96263A56A733F8FC9303702C59D19FE6BF5B9F
7D095A0846FDEDFA790A43C7D1F3F4D91AD4D6DC72E0986AE3980DEB30E47C51
609CCFEE292C2A4C4635DE819B4F712F782CEEC833EE17DE1AA41B8854A8FEA6
AF1003DE71A0F913A0FE704B9CD730ADD070D6A1FD6145722DEA9BFA61E5FD39
39EAB427053CCE84BDE6AD21FC10653E3CE63C5F1C17754A1916D86B4720E7B2
DDFFA5B26627D017264F5A0C5916F2EA99E138B9A9BED3A3E4AB2F8A1B89DC7D
ED715C97DB82FBF139DB300A7B3E985855FEA27DB606A60899CD805EA760A71D
0E8F8D7690F7BEE4973E0A2236B6DAB62599BEC1AE3482CE372F0914C527A47B
CEBA28AED81F0AC42A42422F28EFEF0951EB929C8EFD20823504B643748BC127
17CA4051E3257CB6146D49189EBE688E2663EC23457D36616E70415BFAD811AE
07C07BED3048CD8F9241D7B2989B62B0D39D3DFD83D408AAFD449199B066815A
6946F98663CABD79F01282C2BCC709EAEC31980DF7EBD9331ECE4C3BEFD80501
FD588A4E06EC843BF02041C32C8C5A4A58C320CD3B6F148683375E02AE84D71D
4ED30E5CEA128B236464C8288D38AD92F6E51612C05CA31892856FCFD66B291D
0DE17515A8C18326BBFC28CEBF2C784E0638A4BE988A67EBDA3B8D7DC862AD72
8C1A84DE194C77B3939EDEB9218EB615F00D4AB9F529226F524F48604DDB49C2
4614E144B6168CB5DA55DA52532741D7E36C7EF8870853C3203E877CEE5A6901
1CED567FC33DAF097046CB68F55BEE6A0E50C7AA56A288A75523FC1F3E6AF817
97265F4CD3B876E63EB318DC7A842D4B15F722CAC04FBCDB2DE3491BF98BF073
F30096E3F97F1B6062938812908B68C9624D1AB8284360543E70656C55D9B228
6CBBA569BCE9CDEB368FEE184CE653D90152B364D469BC7BC25D310DBC3C9474
55D7A625E96A401478CAEA07054435DE46403DE08C9188912D4D48270E01EE9D
5493868EAD57E709EC513EB408DC517F93A277F26DE84327E51E9E3BBDDE5AB1
00AC3681957B1510678C5B47F8FF3E58C9C0964B8C01F5583C304C8E428BB600
9B95E554F15504817CC359BB0A14AC1CFECEBA22977014BB31C1C674687B212F
17A522280B91B9942A58C322F724338AC43484D60B3507CF28D8C5521864F2F3
9A1DBE69E07A3781933B6BA776240BDA5A88A226EB55B6B0A54D108A420FA0CE
F5559AF1D61C2E1F12C9456946D9057FFF41761E8696DB43C429A1F634362879
A0B18791658ADDB4E206BB08D06F5A42395F6BA295DC9AAD72ED2FEF621C91F4
83133A0B0A0CE35B9C82EC46E0D4937FB50D2910331FB6F30AA3CECDCF3492D2
26D6773C3AC97C514EC4731A0EBD764F206A9265CFE355DF1A91EE25FF483D55
A5284A1DAB3BB85A73D9E63577F671F490519565BA66FAE8FBA7FCAD3A1A545D
5AC27FC1CBB2D87B50016415563936F23EEFB36EC010E817467EF8A5986BC3EB
BBC5E3F2FCD8562ACC96CE301B918C303B4B89FC38196A0AD01937EC161AA9A7
1420CE6439D9A991AE4234B9645ECE7000819106BB088A2889C7038E467BE158
A58D56EAAACAEED85E941070EA8E2D269BCA55094BE7AD073AEF8DCCF96F27C8
857AD4F2897F67B7B636FEB35609E933747B0D528AEC8B89ACB6CFC3E8039532
348F36D2351BB92E451EB5379893618582D5E5824BB4ED7DA979D473E46977B9
662109B84CDC8C996489B232E42454F2FF64A2DB33BE6E5A66218AD3EA89B014
77EC652D68E531AC07F8796326A7E9DF7B155F05D9CAF04E3908418B0E16BBEF
95108334977ED017B67E4AC791D923A68B9F5973A32F83C6422C3FB62078F3D9
E762EDD8B259ED59B081C153931A7DB795B7B96B7F4DC49C9922CE8AB5F6C8BF
8A3DA509CE812908C6C223C77090BACB88E14C33AA4E95E4FEDB678E2452B277
418273CC8DD14DB08994CB44776C01A4DD2A0A0ED7B105A489F3D92D08BDCC1D
806B33838C8837CE066C32AE65FE1E8A8401B4E4D371EC659D1BE4B42AB12FBB
70A41F2EB01A30F21D72594121AEDA3A39B50BD516EE9FAE018C515CCC5E2F34
7A7E54C91D69306CEA6350654BEF945756A7FE9B516D78B71790AF59392A4F6B
9F0BE52D4FA466B2DEC00F72DCA123F543F32B336128FF056289211FB90CEF16
9B7166EADDF66E26A1B121C8A6C060B832C707239278A199CDEF79A12E84E27F
C021114A82B2116DD07188D6B241CD4FB3601943A2C554700641023EEC20F6B4
ED7A8C2347DB9F1176E58774723ADCA5E3E09C09FD5EAE9004BAB07170B87A30
972381A55078153CB2055C0AECFE0FA1A5461D4D04BD6D0121B36A30E09A2C4B
068C8B8C10EC0B3D1F0475A6EC3EE90B12EDE0B5F0EBEA37830EC42E6A6CAFE6
622E8BFF996465593B09A41DC31291BA8FCAC71C72AC4DB5F7CC9A4E912A504A
C525D9B027A312F4F81E4D93A30314C82D039EF57C7B621793C1B7AB61658497
C5ED40C0E0EE24500D7764935E53005B5302343C2FB8F6C2C217EBCBE8C6A6CF
ADB46FA0DFF8B239874FFE200957EECFAC7472A1F479B4C5BBE30FDFD4FB3D0F
A795D71CBCFBBCD9D3A81974607EB357CD85ED9833696FB6D1D41156817AC8F8
C85C6B69AA0BD227DE971FB39A38A8246EC8C6BDD095C71066C848375269502A
0A10FEDCDFCF13F7171531833EF85233565A312AA76BA2D572FF1837D79FDBC0
1E6AB9F42B81E25B59B205D21A552C979DCCD6C140E195E56B62A606C1F57536
E16A9A113DC81962E5E9D8BC90DD262E89C45C5D1D3FE3B05868AB4464E79FB5
BC3BFF4E02D6C8850A17BC215888E137877D4FA5983EF71FAE195FD21A5C6AF7
938C40BC60DAFF5D2D3BCA7079A72D69EE30104194E6777774BF050DED6F4F99
0789B31933D20964583B2B7C12DDB263F10686D0B883782342693719C0781697
57FAFB2301C72CDB2334AEDB1C846EC98CAD0A5F04327F2EEB489BD4F504AB13
3833F382C228271E97071336C7A89BB1BF3172BDE3D3B3A14DD496D67E09854F
859CBB7259342C1F813A6BB9CAAE8F8DE1E72F01D31F434E5D410B15714ED789
1B3C23B0C41758B4122E88E5FFF10CD2F3564B42E0C2AFBC58E382FAFC421C0D
B712130447645951A8720300EA13F9C49EBDA38E539D934508A6852C9212E5E8
D28EE11AB230A90EAD82A17A0F8FF2579B381888575A409EFBAAE5D991FACE2F
61A7CBBC57795646C50F13E33D08D4AE05A1EDB6265C1BC7315A13A2DCEC8A2E
B3AF7EA50038FAFDEFA9CDC3DC210A471A392C370F36DFE8F2770FD89F4E5422
9CD4411587B8E9F56A7477D5FC78807E372C0453ADBBE0271477C723C26CC25D
89A5F2AA83C398DF
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusRomNo9L-Medi
%!PS-AdobeFont-1.0: NimbusRomNo9L-Medi 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Medium) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-Medi def
/PaintType 0 def
/WMode 0 def
/FontBBox {-168 -341 1000 960} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E178732AD0E135F772215
EA7EB7EA7641D31502E1BB9661E7B0E875AEE90400138F2AAF4A8686C73EAA44
E5CAB467770A3D12E9807BAC97B24A8EFB0E276760F4F51EC7123C43BC6F8DCF
9A2F496A9172813FB461FD870763306B45670653A9780FF409B734CFA74C12CD
150B03344295918C4ED893FB620A9499404B83C71152BF2F2DBF769000D116D5
EE264C016EE3E1241018F59544CCE53E5AEC124CF6C59A4D7D7D511ECC9AFD49
6608ADDD237358D7CF8B4D1C5BD1158CDF2D6469D9BD6E6D9762ECF34D1C3C27
5F69900E0D12AF9B21F153585742E999870BEE3DFF6309CD82968EBB40D9C269
CD4306654AAB6734151132DE4194072485FD082FBB6DFCB3FDFF9E1FC88D9483
8AA64B5825293978C70C9EC095B18352BFDC34B4BE9C939384E3281BCC6B1808
A6B61EC4E47BB6AC14B105FFA7ED6AE99A1CA0B360D1A5C24E0FBB55C66F5811
A5CD0625654654651979A8C4C3612054181CD300CD42D1D9CAAA589118D6C7CD
5EA8A9A0C639D5539430D40318F4B739DA281ABF2BE2765D44F45B218BB192E1
9EFBDDF7777E8730FA7DC0651BCD5D68EB743C51D9CED55403021D45F77CAB5E
7E892B3D1F875DA86C030A2387487DBAC8795749E849EC93439C9E22EB20D11D
07DA0F09EE9356D55B8D0D8555F1B0EC98C72863B376D3436E10DE2FB1AB9453
DADA019DCB64F6D059AB3A95B28B94435004C9A8BD3FB80E2B9DE0E330D03622
3AD965B4283E6DC880A2130185CDABC053C52693CE3F50557F524D7CCA9BE05B
FF9597ADF5D1C432C00C0B0D8EC2CA8436685B4BF3E2105B89FA6CC787B77637
248796C2F43872B3BFC8011159C22EDB7149AD8932360A88A223CC638BED257E
04908032ADA750F17279F7331189C322CB5ED9B66E502945BEB1EC68B1C7BCC0
2322EFD669C229B28CE1D0CBC0005FF967D0A4383E29538AFA13D41D484D739E
487D497DEAD8F661847A5D82D77D91219ACF666E565292384728E58E1A489054
8C3E34B413A6A550C499218E7FCF43694CBEAD016119CE85515F5EDAE3CD483B
A0F32743E7A189708AF0CB6FBAB22AC8F23604FFECE038C838472CA40ADEBF08
47AB1D450E07F9D51828D25DDCA679E3FAE54634A37AE1A5A778365C5A2C8A27
64085AC775AC132CCF27CA164C4721F67B63D52E388B17122F15E5DF391674CC
B6C9EDE307D79E390068970FE0AB210337558544E8CA59BD8BAD7D2ECC69471E
2E0BFFD4778A2E21C19645790DD11C5A93C1C33BE13B6A35DA4487D9EE9B38A4
1B2049FC64E228D7319ABCDFA4A29B08A08DD8430B4EC67FA6ECA214DAD0BE07
680225415ACA2FC86CFD32CB6210B93F60CB7A2A2959DACA9F8C687C1205E017
F6EA82A4848CCD1E76777B2EF6EC7952AE77117D3E5747718836EA0566266595
AD39130B59BD9BBF3F3814342022B997F022EDD9808B2F5F49CDBF36BDC71F0C
741EFCB8072813793C66CC14721FEBD858665236BE384DA73C9960A9CE8ABE91
E3684307EE1FF44D500F186F57D22DAA956983F58DE59FD2B73B4D2E1A014846
E680CF3A27560D1D9AF2D655DB049BA9E3356197B8071D9AF5108E518517498E
CE0255C8C4126287BD22FEB768221AD5999522E137F808DCFF33D40632058319
3B6201E1F9FA19FF49A5888335A21204FB9C29B6272613C152BBE869D3E55D11
D9759587F283DC60A2707EA2306152788DB113A3E347B57978DBC344FF1C817A
7836AFD8AC4F96F2237620EFA9C42C7BC988A1D30E8B43279E75042A9C413C83
8DBAE11B315A3B6B5FC1351BEB300A84A5FFE1F4E73AB0D97814C976112B9DE6
0C2B9C13E5FF22026C6F2643128B9155F977871CC66743AE79A77B4E9F707C6A
0E129A2ED4DF0D3F43D356D35F9E885757270E9F21A5B23BC009597BDEA4E71E
716433238AC886D639207031A9A1CFA77B04FBE0579546DEB6B1D267007B178D
AB23BAC475BA70CDB2554C11C668C39AD7EF03CF8A2EFF21391DF3CCA7ED2CF5
B5C8B2F47974FBE8689B641519DD9805A5D7D9D85748FD8BDA10E6C2E084485E
E622F8D087C10CA915447802076378323B5DA1178D92CFD7E9CAF75E978BF7F0
B3A639F351534F19665BF09CA6E71DE0E7EF6E4CCC3AFAD9965A928F7C24C0BC
7D55D16AC3D839A055C36BA4FF9E626295539FC859EA7A4A30C8865D1EC80E13
9A017194ED178FADDE49A1157C7D1FE4E809078F78DACE5A54C0701E38514044
7CB399037F850497C7CE4093E2F1A817C5B8946594087D55C2495990EF32C290
CB9B92D2B26060C6893E637E055EFB165093697034EA51AC4452F6F487A43408
BC919F2D6B6BB85AED82C53E115CD32D57D0AC1341F0324E85E9E523E5DD8638
593E67E6FB269FE8A9F72055812F964F31BF4133E260320CB31E9D5A21516A13
619B0096975AA15E27722D7FF1EFFBD47455A66E2DA5DFF28E8B1DF45EA09F2C
D140E6BFD418DBE559490BBCEBA6EF56C66D97CCC38A10E0EB7EF803BC78EBA0
3DCF28A5693D88FAA5F97793A179E82B57DA82F460B73FA9B9A3EF069702BC75
D3223C5743622228EA753DE3442DB12ADD7900805960C636974355F5BA0B8FEC
C922784AAAC3AB4AD95206ECAD22C4FDBDD9B918062794D40EB66C62B4BE8E23
5D1819CC22B64E687E934D74DE1354672123916E7F4D46213FFC9EA229D6E9EC
ECFC4A6441F33A5597D72C82E4BD9A85E2004635A667583741122907F0A3DC00
C10F078073E90FBC96808632F8B46BCDD7C352F3D0516198DF7C495B95A55DF9
CE6BFD3D847DA4F518B81FADA81814332B622EB535CFB15BE7E79E6A34DAC7C3
ED5734080B57E1325B7D946D805BC78580A7EF7997467C254D74D5092242233C
D816DEA7B21CFF20F3379FB731A68582CF3077AF0D059CF55D0E2BE2041FCA3F
00F82CCEC786F7CDA79CCDE6E513E36230A5D0900C406FCC08CCB25B2BADFD36
2AD6205BA75F18B648B9059C14D972A964A68EF9DD679A34FA2F8C7F04743DCE
BAC146F6B31D993A0797DDA3BAA7CB714F9B797B266C77BA3556C07755A6FCCD
5F7FEF48C1DC64057C562C8679BA94973EE4F7F6CB91E156924B18C7E3704CDA
D37E8F945391470E23212D6C769FF65FC381044288B024F03F0631861107DD17
08A8CF19D301A75C95840BAB3FE4377712AEACE305733BF769E78F0D933579B7
0EA73B1B944AF14A3E9CB5165DCCAA2A7C8AD84E4CA1AA70DC55DEAD7D82A249
023AD79A99760C6A595202CAEB5CC774184B0ED52540C79DD8FD984174F92E2D
F48E939736AAA1FB0620CD94F6A13F10168AC33B498F8F495661C0069515C10E
979589DE9A9F739929DDADA413EE35894A6A5B14CBB136548C4EA9C6E13138BC
84B181F1401416C33BD02A15FF37754096C5D97BC3D1F1C93A6E82767543FEF3
277C1DAB9927634E06E3C4596AE9DB308E70E59DE86300C9556031BA7DA2BAD9
955F9061A59C954D39C6883419972B4A4F206B13B702DC4E76A76885AF0B09EB
7F877877D44377FA2A33C0EB41B10B64C1425ADF4234D75F535B7F1D968541E9
40E2965D6A29196A4AAEFBA594FAD49227BFE6E0AA118E30CEA0F5B50FC52509
D84B61BD20023FF06ADFC625CD0BEE89185AA6B705ED5B906A7F141668D361EB
443BF52FE442267E9713229F7B3A484FAAF964C4369FF6647D12568CA1105951
D105D655544DA34D49A6EE1941A393CA1796ABB4B704483144D83A77079E9343
EE98A2F61231404950AF2B1601093DB7D87067C960D7581DDAC56D98C91B04B4
D82BD10565E401ADB1C088C64874AEEDF3F45BFBD973F92383F4D216BD51E515
92043269171A6323CBC71CA29C902E055C3D3D81969AE2C0D7124323156A3E08
352AC8C801C28A188DDAA74CBA8406949FC09918326CCB88FBD99276B059005B
F2911E6C91AD4F48955FE377C69B0037461BD360D2D3A2CF436F494C69BC472F
5575B1366C832BB031A0167D93B54050BB7006B4F65699D9E45E323C65C3D953
D33B6039EFC594B1438B4AEB72DD3680CDFCE4008A7DC06AC7AE3C09162E8A4F
C6CD4741B38836CB599DF98A201B4EA79268341ECC241EF24EF966C5A5312C2F
C5CB86B041DFA1B77304C21C3636EFCCF24A6425D4C7AB61C5946864A1C0EB53
96DF8DDE996F9D3B8A2E27B9D1015235F4D51C1C753EEFDD6ADCEB45DF4D0071
30EAF8F43667B79E809F5F38468C15B44107090BF34F02D1FB6A9C36877D0B77
7EEF59B03F19BC6B8FDA9697B71FF1281B0D67D4D3CD375C79603EFA6E08301F
99FB849DE95191E6BDA41016ECD6767F1F3004976C5E488F036913680E3EAFC8
74AFE60AB11BDC4CE96BE4DAD9955327100476C03B131A04FAF2FF0BCEE90224
C5EAAC9C996A67D046499E471C4C9BC0470362067EB2EE5DAF403311F039C621
8F4D2882FA95447F839CC3E9F704859D7495D9E1AD240C5C1E3E022AE56FA5AD
2CFAB06202FF8DCD698B209B255B5FC9B7D85782DC679DD4B98559AD18A41C69
5AB639E42402DA190130A707E023DEDC204AA371EE724D907436E13B75F1B658
A581597C1C47D74D0805B678FCE0E176FED99F45E37FAC5F611FE1E1D12EC94E
B66C951D33DA27C403C6F79CA2D49CFC03F5FF651B7259BDC884EAB6025BA542
8874B6FC00C1C94B7AA55C06AB4DB56AEE5A113E7352F54A4F9AA2E86E681F85
AB5EBB2A7A4F9C3F74D1D01146A9EA1B828454C18C62B5B4E064F59069C97C8E
DFBD7E310D2BA97751FAED5F0B1E7952412B8393E0B7D063BDAF7297E8EE5FB0
4D24BEA678B437D3DCEFFD772802C0B77CF3D90C9616C46635F2F082FC511BC7
53FD3018CC393089727A05FCA148704CC13134473EADFE1A499E88284D2FB544
B7BDB637868345A8902FE7916C69D015E9FB9765648552E6BA4CD3554E7C51AF
FBF5AB2C8A5AF1CB6DBF0B027ADD1C24093803523C518F8C81E0D82045751944
2355204FB97C7DE4CDDA7BDCD03276CC54E1C9739E059F7BBC7ECEF188804DAA
2B51B443839D49DE5CE537DF8352F4611A3343F145DF5577981AC9E0BEC73764
560BE3E63705904CD31F2397BD6B4EA4764C0C9CBF8588E301FEDC57FF96F06E
A28A98D40DFF9A4EB09326163E0BE256A0D5CF358A8F64CD0CA264AA0476CD88
D97E2B3290EE801A65340FCADAC222B3FD287BE72B87834E458044141E0FBEBA
DCC87EC16E8D5EB47419A4CD8D7659674DD0A6D87EE94E783D9B3A2F97C83025
DD7225AF1CB7373759BE4A62F1370FEDE056CEE265838696F01C3027446987CE
A1944FB852892C26CB81E231E7B17DBF1EDDF0880B1CD099FC69F102DA10621E
D249AA896968208847D23F7752C54C6D4FEDDE177C199C27ED39ACC04FAA4D89
3D3A4F5947661B44102DB04EB6495026CEB3A0FFC0D9CEAE51B1988F17F387EF
BCBCDFFF30B01C7FA842B3843C548C8BE703104F0F00E7F11EBE63E64F8F54E8
221E7728EA25585F68B455A4264595BC56A23EAD82C331050330418FA9307273
7160EE6EA3E6E8FB3190B7E1BF4C2BD3DC8A8779D641BA89CAC631360E013D4F
E69687DC1B58A59C9A3917A076E04F61FACB359C6006101C7D563C43E4C052DE
07548CECD9D12CA669A7421262AFDAFAD04B242AC2402C453CA65E5130752A05
FA1F5B0471A8ED09B49109257898F1328D8CEA7357054A8F9EAE34189DA37617
3446A744656C6CF7817929032878AE2345B40584F60466418018F2DB901B5081
225F94102049493EE67B1DB7683E10561DFBCB348D860A212B6045A10F46796D
A2FB4F49A1089EB1D4F2853DC558F3D4D270BE712D7D30CE8B6C1672EE798644
99251C58ED862518164803E18FB6CB61F2E6250150868450EF0D09580B0B0020
BAF108DF807B6B0F449620D687E830A3386319CEB7583654F891D0E7259E4B92
B97D5822389FDF7AEDF8E4AD1F20E68CC90E4DBD3F8EEE5C776507CBFFD8ED6D
BE77628B1EF03A41F705CD224A7F38FC6B2E46767C692F2079A50F4EEB8026FE
51250416E41147AF9FFC2A3B2C40D22CD60A9FCDE88C5EDF8DBB6C185518917B
D12D99DA2BFF04182DE880649D41CDE8A3E1F17378EB08BD9E11D8E49A593F43
BFEF2CC1E3B8F0E980DE9F1815007CEA51619D84375B777F3643F3291B972B14
3DA98F5C0AE8594715752E6C799D5886BF9CE95E9C134324C46BAAED3794ABA3
B9F46A8C6AC2E15618B5691931EAA16D28D2745B29DFA4D35E06C8A1C712F2B9
69A636EE0CD562DB316843A0A3D8D9B8885388B5E8BD1F4DED5E28913C36CB6E
3A53FB6A6F35C17D22DB84BA3ED3A0A50DF8C65F21F3E925BA1A9888C6A1E1AB
D949874CC39CC668D04C17EFD388D2DAB89BBF64407C4DBD5928AE68403AC7D2
E7A1BDC6CD993E5179D3855AFEBFC2A71D330E3E436E36EF8FDB117B95531DF1
54D331A0F830B88E3F90D0C2E610D12CA43C23F3A69AE1E5C9B9095FE171B762
27228D7FB9AF79F6CAEAEE832EAA7D5B6B7E57DDE81B21E9358BC6B20F77CF3D
FFC7AB589C444568F3F1F099039C42D1B7446419A8DA8DEE5C8FD18CF41B2F7E
88FC32E9CB85BFD75AABE504D5A91E7848DC06CF3BC7973997F0D31AF94BD9F1
8099612ACC9D523A68597E66DC619EAE252B3B1EDBA2B133B22BEB6EDF792624
CD746AE1FBF4906373860D2D983EC7FB9C439FEB397132606D94D01D7C2EAD4C
8381F6E07971DFFDDD033E51D07C0ACD83ADDC464126F4FBEEC3E882F618DAD0
A7B80252D6A9BF659D3125FE58CF6F2DBD322C05389CDD1312F99862434B7002
E64CC184DC399FE1D8CFA559C93999700F1189021D6015143350788C301A5AE9
486B8433FA0A2D3B7D87188FE3515D03660158C989B9009512A2E17BBFADE849
DA85124EC4089FF77FE20CA5DC3004703826689989929BBBD51562684C8CADDA
24C91C1965B12D4F35FB03C43BE397E8115FCAFB54A6AE924F13CAA3047E9109
58F078317640087369E6167FB43A25A48BAFBA5D8007DF60C979649A736AE27D
6CB6967FD8E5DFC565CF8858ADE1CC015A929FC684AF596766129A7AE65EAF23
F62F9D961824EEE1B70A321965E1876B223B74D5C7E9D5CB0306BB2830120556
FA42FE2A7E0736F704E817D24A465B9B131E5027DB020897E28D54D30CC14369
1AE2F5A5CBCC81399E350377D316AC9EC644671EC778814A240E4D7648C4532E
6CA64EC02E99A18AF6236A3C23B402F05C4F628D61AAE8209DDC1CFE6BFA8989
9E212487113786062F10617DC1C8ACCDB987BB5B18C44CDAB4431F82270E7313
FA49448C65DAC37A8C99860C48F7B7B07E6F763659BE98EE64343BCD5330AEBB
C07ABE2B8BCC12DFDE6793F91B82519C0E6A1E294F56E6492DFA30376221ACC2
9812918970E56CAAF92ED138B79673EA272303667342DC526665AFCE99398BDC
DD319925335ADB62BB7B2F082169DF1AE94A9C8B72C780736E481019107BA364
5C34B16D7891334762A700EE46CCFF0F8222069A239E9C090F9A7B3E02A3D070
D6A1FD6145723A2C53BF0B375CB2B972123C369F37BFA6A2708FD8BD4452CDE8
6A393BB350CADC460FEE732B30EAB3627E831ABB7D7D60BC40AB26DAED7E866D
F89959D51C942AC18CDAD47DE634E42525D946FD1146C20FD86A5D013D3B2506
96CCD029E31BBCB3CAC07C99645B0EB712BFB3A5CB6D34C462A2D24CDE79AF4C
144ABF6718E51CD51915A4D9761C03D72B33078BCD989B6F4D1A360F89A668E4
56DA34300B77D99CCEAB577C4EF72BDE076F840258255B74823E679B72CBFB81
CB274EEEAA28E27541C64041972AFB843AE2A8B12DC0B67CB697094C741D707C
0CE3A3763286115AE7735C1896D42B2CE5BEED7DE1603715902711EE5A3E624C
8D1DD4D7FF8901653C8551B4EC754D5F6637C49EB72A1A210B593A3B9BF3446D
D3818464C5C352FBF7439C4DF7DBD62A0848DF594AD7D8FD7B3277391EE65A94
E9CBD273F6BB4A288FC6F0E4805B69D9D54ABC2E641196A40F44A7A3322D836F
E52E18111F2D07517F6F06D9AB7ED8F47D75EFCBD838E6AA380A9857E732A234
E50243714D42FF36FD68A404F1DFCC0578C321367BCF912EBC8EE71BA37B9876
4D03822B8ACB88DB37ECB38EE1663BDE428602B32E6EB0F0EC35BE6B5829A52E
812088B9556F8C4F1B15B4980C9A4340489FE15A88E2EF46E0FA73157A7D2B3B
EFD500905C41F5C155686B646483C5707DE370FD5904E8C7F29D7C3585499CD5
C33D2DD28166FE54005AC6B314DF5C5DE51465D33177F579CA2243C11FF4CB19
0C1805522BF41335F04AB6CA41858B149580527CEFD987601B0DD31B820E7D29
CFC3463250379CE4B4648049569DB24DBD2681CA199464601AF9581D8540FA06
5E4DE52CE23CB5226F8C6E76A951873B41665E3E518EF909DF3950E850CA6C20
153E7E961919052E407318ED6D74BE80C17E76FEFAA497D38A6F9245A888C53C
B752947DE09AC3DAA12496EE062854CC000328F56BB85506DD1E7D147950DA4B
25569440987E6FD7C7A838A9BF620CDC437A69E17804F22069E4890855639E5B
39BEF7E5FCC98414C804F3A278B5BA880C2E84EBBD1508135F6A6931EA0D5430
4CAF2BCF74B6000EDEE333E185F4E23E0A66DDD15BDED1FAC380B91F88FD1C1E
F7811306D168A9E62F4696441ECF94A72E8725EC0EAC7397F850BD820D668E9F
E55832958779EEBA7ACEE2023EE08956A36219A2D9CA692756D79E24EF13D659
1FCB93DDE508BF10A92696ED82DBD9C8CC435A5002F1A83B39F6D6E26B9C5C08
69D5473BDCE828B7D63B355D643B5F8735E3B83B5A8ED6B1AA22D747B1608857
96085957E39DF3DDC87E92E2FE8EE20996F52867C6CE88C3656288D3D2CC767E
174F6A512DD66D9E2897EFBA432482E144CF016E3B3AD1A5C01069B9B2034399
0CEF7C1C413D3002D39B4380921D757195FE3298F9B314A48BBAFF71BCF12C1A
0004D28E36A5E88062EDB54092BD6B947AFB59C1420DC0F21A6611EE70490614
E6A5AB17E2D8284B19241175607AB11D6C8CAA06763CBF9D3E9C8599EEC9BE07
5FF7AF603D03FF2ACB4984402B8BDA788278EB6FDA73772208A65D4B7520A992
ABF0B6D96D297883C8B649DA89D56AA531D290AA01330981646E985FA02F7F76
1DC1D072CD01B49DAA9AA7801CDB41A857C056D7A6D983558086958FF839797D
B45168A9F3FEF6B8BCD3BCB72BD872061B3852B74B006793BC90615DC552B1E4
1C1D6C857F8F2867BB8860B336478C35E61015488CD9A678FDC8E849A8639D82
520AC5332EF9745D63492000AD3DED86068FB9A44C98405C4FA95D662686A662
4152A7A2DF7D50E360476C0235F3CD2DC38E1018FDAD6AECAF3A445FA080DA9B
22B2C656E3ABDDBA6FAD3E5B6338F8C590052EAC34F2ACF2B41938F4893BBC85
ADFAF0DA2FC18ED56217DC598ED17EABB82C21FA3C4E41B9B0B901CC822169A5
0C533A9C560C53F4EC10709E885B121070D68C9F8D3F71A19C3914DB1F6F94DA
F5104ABD1FD752CA5721CBA24721E4DFFE974F38EF233AF7863D21448A01C449
96DAF77BFC22A20731EE7A8CEAEDF7D117235385BD69D068F1BB3C6B565D24CF
2B6AD2291E6FA8684619451A3D0928F822846260BB5A6EF4EF63A9AA939ADE97
5C80449FA67D0E53259EC9844080486B16078311AA57A9D9BEDD1EC497D8C726
3476FC2357E9D9D60B363007DCB1C14F36C98A2169DDF5B6AF26E79DF0641A18
64CAD316ED13DF03C99757CAA452FAE46DCDAF88D6BA3612697568EA0D83DDD7
E1D83FAE2FDECFF5AFCB3F98751B8E0C9251DD4C68226F267C021CA4C0E99CA6
491D7E09D88A81FE4C24396BD03481BB28B03F6EC8006568E0E18B1B22579F08
F4E68EDA829B4C0F823586C153DBF371264C2592CCDB0D90F33A44EC9D5ED3D8
38839CCCE728711255AD5797D4267092C026DC41AFE6EFF251E77BB2DF1E3AAF
5C41EBE3D6131603EF1AD7BB91A1695AFE03FE75543C2FA6A4C86B4A1A47B29E
51AAAF8EE04C5C4642748F7A1C3EA0BC46A3CBA124AB6B22F939BFA9D4B981D3
DE3CD424E81DA209444867A5E1A79AFFF2833A7205A402012BE5E3FE8E6CC190
CAF25D9965CF69013A587AC9523706FAB55BDEF2D9A3B50D9F5293BB0EE7C76E
45EF546CAE548825A0BCA6BF93B0B1373AF60D8D77207C0FA4C177C140D2E1DC
AED1B2AE879E7BED0B8D7A51B2583129FB837AFE9EDE2E65956D95689A7A9D06
E1C28619E8A345415462F2538DA616C02EE50DA6ED4BD6582E0925DDC2C0F2F0
DA63D0CC18281A9B5EC4DC23DCE672B0B3FDF1762415029ACEAF30CEE4982BBE
8689D06658D1AC3A5AE7900B43027AFFE8959748592036A2427850EB2677722F
60929D7D55556CC68BCB00C415017C2E5851A2C11340E59FEEE1B30ED1EAA29F
5ABAC193F1465DB934DA9446DF2026C6A7658574588ED093326B58958F8BA02B
38542F351D81614CD73E523E3BA045ABD83FA7AB3566D11693AC13254A1ED245
39002F8ED95E113605DCA21404B91285599E58D1F25BC54EF5CA06112A853D45
909298E74BF76A741DB0628FA575A59FF17118D9CAC94359426F03AE236B9B02
B7EE66A54E3FD24C780BB7B6AD8195784DE96BECF95B625F9BE81DE7B94205C9
F5DD453B1D3838591BD4A0179BDDE6524D9455F1DE2CBBB2F3B2D3F3B7005E9F
83E783452A7DD359D12FBA7F757259A5D32A90AD3A6AE9463220934651C25A9E
3F608EDFD858AD4C773175799B685B89D4019D0AC5508DBA86A2ACDAE6B930FB
8DAF846931370FF1C07D30C1FBCF2A5DE493245D4BC6FFA1EB7F044A395C50E8
6BF8AD54ADE5803272A4D0BE62811BBE508DC0A9589C4DF4D734347F11DCA250
2FBCBF32161D54A462A9BA6CD401F290968A3807DF83B40761D4CFD11CB1A459
74A0FF78BFDFAE49D3FE7B47F0B4C5BE36297E9DA5DB6874A8C86DD4EB83127D
F45ABAB888C5D187B28B161849E706B5C85FD58E167824952E8FB6DA164BD77B
928F1470EA70524AF70C5583398519D084F90C8E04DBB7FBCF60F20BFA385A1B
CB2F040914451A484DB8AC963C19920FC851EC964CDC282C66362CB79310A900
0BAB018CE3C163B3F5914E6B2D81EEEE7CF5E823C6980E2FAF7806ECF8ECCA56
9B93CA643543D1A5454411724909A28E403B29D24920AB4BDDE4E3A4BDCDE076
39B1E672B295832B1EC2CB76A40B70CDB11CA8BB678D120DE4A8AEA3D0A475C3
89BB47EF60159A8AE568ABC18F158B100E9F9AA20F92F1501F0F68A17CA604A3
91C0F2A2DE4578CC219E15BC51715C05378DD5E108E462708B0477ACFBD0D4BE
DA6C5D363DE83A1014A5433EE341DB7AAF339B28FA691AE6E85E456157E6B52B
165F8656DA717B5D48A2F632862D4CE750E1EF26F32940C62B43C9874196FDE0
EF210EFC44D4516FF2B2130EEC9867EF2BDEEFAB8A427D1290D79550DC3125ED
B6FCB1F53BB1878625504EAA101AD50382D9BD5A59C7C3AAE2E459124239D3F2
8F686B8E904C6F65379B119B6EFA73E29895CBABEFE6C8EC19B131E330A1C726
A873ED8D1A20CD3FB33B9341485C16FE9005D8F78F593F8C883D8FE833ECE080
44B2DE27E1996592D29D19C4CAD31A051D6DFB49716A340EDE805410A4EA0639
9BF9E85B48962C844CABB72B2149EE56501C242FCBEC5B4FD0BFED67DA1C24A3
6E0E94AEEC901DDEB541F23BEF64C4A9C205FDE3B973BAC247182F67BD574735
5D137E51894B0CC75C93BEEFC7DCD7736250359A55241BC3F105E89F44210EA0
78463ACFA936246ED54EE9EFF23409455EFF835339CFEC3F58163089A5712115
08C76137CD90B2AF3F404828BD82ECC941ED4D496ED729142771BAB0EDE9562D
E405A7064021A67871AF926F6966DE25D75B644A722046D6D4767BFAAACF7B08
B8508F3E75D41A6E225601A20FA85770F764B6D25A3F512F84D882E15DD32563
2657FDBEA106D72993EEF49CD328F036334C0CB6E887B16AE20E3903A655D7B4
E389A5E24EF5AAA39EE5B9797B6F5A4C236F29DA2E496CD0A763CC38F3A46100
07D1E0534188FB2B63A50BD1067CC2BE4E76D9D5406D1EFC331F87A34DB3FDD8
737F6B1169277E9FD612C77680FB3AA3B660CDD5D2B90D4AC6E3CADC55C44207
D8F89910094CBED95EB1BCFC61C96A71D60356646E106422CB12CBEE852E3860
5C1F9131277E5355A94ED0063174DBA4AB5786180391F138B95F030E4AB2CC39
07E002C3B1866ED56EB2EB8030344F21DAC18419B030C32BB6A4C2DFB31D17A6
018BD310CF027B5458039DE4DF0C273301879CFD59B60C53A093582A6625A0A4
02728D0EEDDA1CF1B88D22578288485E82DB2634F93E09B8B1EC88FD61ED316B
724567BF9B3F430A3B17A8D5134C97A5A93A7D3E4A78DA234884B5A6705990BC
E7CFD12E0EF27371B6A052148CAC8B5D3F0921ACDE78DEACD641F89D5C38129E
B72616A2390A8B4148FE69E944A74AABE689E5C24FAA478F5F05083B766738CB
E9D36EB79E5D95763AE28653BAB5E7511CB97E04B57EC3581BA4610D1D98804F
1B279E6F1C7CB1FDC0C6FB82C8A8E5B8B59D066A41E4AFADE0DD528D9EF268B3
9865DF049F696280ED29D1DD9760234FE58C871294A315A4C83FEC99E42343D6
026B5813E6FF8025E9BAE774853A55444B0694E2C3A14BFBDD79EB868A3D5756
DBF903BF345E4FC6E400416572807ADCA298C41A6F67986FC9C9AA97083614CC
8E226E9E9EE8F0ACA110E89D40FB77453796044F1B27688F4C4958CE625F6E15
5B3FB4A6EDE125EA7DBFD95A7BC4E4E6D4AE26385ABF6CC8BA8E3F1E1CFE8B99
D995DF346FE5B27583B6F9F268467F2BDD98A936F92495AA6B4B63890C59DC20
8CA22788EFDC83B0A1668C09618AC8D2D154614BEB6195306E44CA9531E23167
D6919724679E874DA05B87DFBFAB757E6943051E897F31930D23E3343E916D07
56DE10695EFAAA19D8CB6B417F7C18E43E5B4E5D0F3018CE1F09D942440BC965
9E83E3CEA20AF1973C894AEAE7ABDE8D68C0443527092D9CB8628E2BD7586240
4E44B47430F0DDE91C5A1E1C29F37BFA06C24140D492C02688032AB86B2CE57E
12FF6A6D0AFE76B2B0F087D64524819D9375556C9F6399528F71EEC323204D22
30A0B65D436C8DE97C2E08CC01AA5E3C9A4B43D2286E39FBA714471882706F26
6C56C412805E302CCC65CB916CBBF9673D2C81A44FFDFF93867837E7CD0763BA
979DE4BA56CD478D14616A16B8AF0480A653B71D031E41E7102DFB58192DBBA0
BA606975BC6F7CDBD5E8D096D9934E30EA3153F55E0CBC16BC4F1988E8DBD100
B973B8D628EB9A802958D715126F02939E442017ED85432C22B56FB88705AE72
3A20E230CCFB036D55A88319E21E5453FF548070D46452FC3482505F01EFB1E9
271879A7BC62FBC7AF775806318C5EF235DB6D3AE33526878D37BE19926D9CBA
2B2E37870C474C10F75123576E9C1C0DB393B92FA6BF11CA27B0493E70BABE9B
1AEBA3E43190F51EBF51F59D0C8C48C7398BE63392DF577C4FA8DF71258DD3CE
D5262AA74094CBEC8E579F7A24BCA3A7FEB81F58B20B01A33DE66E4A14CA2532
B701AE3AB44BF6236527139E2B9BB8870B10133A6283F9A849BDD896A92E928C
A41D77C05B1114E7E8CA9F15D3587027DB9A74366D79DAFC5CADE1430FF73F64
2379600E97B54C0F156B52CE9B7DE1443B2929C65EA9AD02DD8CC4BFB7C5D366
DE923DB6B7ED971F016E72E2514CED8C91F499A9D6D0EA6C237EADC90A0C7B3F
DF9E270E2CF6E89B585984C9D276C03CC86E8DD87E02A8A7D142A864FD51D0E3
3A5017DAE0B3FC06AF8456A93B1725B6F2ADD829516C5A1A704CAB3225C741D2
618A4F504A6397560F9BEAF15037240E5E84C6DCD9404A5FE031C847AD48691C
2A47DF0566D84D3D2EE45E315202C37A427E678F263108E65C0C4BE0189093E2
CEAC47428B18F2821ED795088F502F5B539F7C1A6A8517B3FB9DC2150009783B
6C86E49CDE7C9EA374F3A2B4F605C2920BC29439691F8797F79C5036FDCCC31C
BB170ED36BE92862641F74C3BFF4F30747A3E1D7F4541EA43CFBA472F1E7C821
DEFF2AFA682C65C411404B2832E00FC393BA9DF5EF52088AE94A879DEE6F131E
0DAEC014F4B3FA6D3A820FBC3C617AA469D016FF06C5C43B556C3FFF6621D823
F861638E4F9C56A32AA124F4E3A1D728DBDCED01E0F785F14B098E4CDD7B9FC2
3D67535BCBA785C378BFBAA6ABA7DDE90D513532575976952F001F6E168DC497
D3AA1AC62C776CA9F64B95A6FBA4BC191D3950DA03CF6F7293E21B397E0BC42A
D07788D81FBA152288EB8E62B43B639840E22667D2FF18A8A2B34CCF43ECDD9A
B71C7FF5941E097F4F5108E15B409EB76B4B37C89E1B183B23704A54EF60034C
5A669FB70CAEF95559463A2934CA3BE7E622AED898D1FAC2E1AC601DD686DC72
674E30AF31064E2C0D5561F748A388757A2F2F53FE2635B4ED21425E71B6533D
905CAF98ECB2AC87808DBFCDB0B0735977DEC90204DE4B02654FE92143671187
F2777EE12E0C6E2878F53A15B5E9A2AB099EFB8E62D4342845B611455E4A66FB
6512C0697F904D9E51F4C7A3DA782CD714735433F7ED57A878E3972BEC7BA537
8480F583E22916580629B48BABA13EDD2B11336BD2709E22822CF585DD4707FD
0EAEB026BEB5B118EB2FA5D7E703F35D926E4AA10B31D7B9334B3E4782BC7309
346C3B5C2681C32F97C7C2CE40025851B5F9D20611BFDA42B30FFB38B99BDAF0
64C54ABFB0B5829B379F0449DCAC75D26D70C3DD18BBC6E08629B8B32E90DAB0
62F747466668C45F4647978B664B977142EBFB2FE5192625C0EC1724DBCF6E42
D0C74185E5213EF293E116CB63DCFD062BC3F2D0F872CCC7F49C4C891C28F3A1
D20786B4082263FD779DFF347D237089B5C67BF8AC55487B591CB5DCF8E5430A
880B23F8438CBBCAE39052FECB75BA61D1249960B33E622D798998D6DA87F4E9
9B2114EE3D2D1E7BC8C2F0F273966ED3B1B4A3E244E8A814E6F99A3B37D53C9E
6B9DB744FC2F461C1F6F7D5246F7390AA15679E71EFE2B0B8A550B42987FDD55
7D79536DF85582FF2BB87E85120DB71B87042A99A8AE86900418D22178442942
CDF67AD35FBEAE7B07A5EE3A3921C54DE1253A0281A906F1FF3D8726532183ED
D7FFFBDC2B44B5C2AA44F42DC101B1C2A9A5645680CCCD2DF69AAD1DB73D8FD2
EC101887EB9002EA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258437 52099151 1000 600 600
(/Users/aahedding/Documents/GitHub/backwardsbindinginSMPM/.texpadtmp/Control.dvi)
@start /Fa 206[50 49[{ TeXBase1Encoding ReEncodeFont }1
99.6264 /NimbusRomNo9L-Regu rf /Fb 216[54 39[{}1 83.022
/CMMI10 rf /Fc 75[28 58[37 37 55 1[42 23 32 32 42 42
42 42 60 3[23 42 42 23 37 1[37 1[42 9[69 51 1[46 42 2[51
2[69 46 2[28 7[51 6[28 12[28 27[23 17[{ TeXBase1Encoding ReEncodeFont }
32 83.022 /NimbusRomNo9L-ReguItal rf /Fd 105[42 27[37
42 1[60 42 42 23 32 28 1[42 42 42 65 23 42 1[23 42 42
28 37 42 37 42 37 11[60 1[46 2[46 60 1[74 2[32 4[51 60
55 55 60 6[23 1[42 2[42 42 42 42 42 42 1[21 1[21 1[42
28 28 28 39[{ TeXBase1Encoding ReEncodeFont }49 83.022
/NimbusRomNo9L-Regu rf /Fe 134[72 72 2[80 48 56 64 1[80
72 80 120 40 80 1[40 1[72 48 64 80 64 1[72 14[104 1[88
2[135 96 2[56 4[104 104 96 104 10[72 72 72 72 72 72 49[{
 TeXBase1Encoding ReEncodeFont }34 143.462 /NimbusRomNo9L-Medi
rf /Ff 136[86 1[60 1[47 40 3[60 4[33 60 60 1[53 60 53
24[47 1[86 2[73 2[80 86 8[60 5[60 60 60 3[30 5[93 38[{
 TeXBase1Encoding ReEncodeFont }22 119.552 /NimbusRomNo9L-Regu
rf /Fg 171[105 15[124 1[115 23[86 42[{ TeXBase1Encoding ReEncodeFont }4
172.188 /NimbusRomNo9L-Regu rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
0 0 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 0 0 a 0 0 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 0 0 a 0 0 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 0 0 a 0 0 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 1735 506 a Fg(TBD*)1138 805 y Ff(Ben)29
b(Eischens)g(&)h(Andre)m(w)g(Hedding)1646 1040 y(June)f(1,)h(2018)0
1487 y Fe(1)143 b(Intr)m(oduction)0 1773 y(2)g(Language)34
b(Backgr)m(ound)0 2059 y(3)143 b(P)m(olinsk)n(y)34 b(and)h(P)m(otsdam)0
2344 y(4)143 b(A)l(pplication)34 b(to)h(Mixtec)0 2630
y(5)143 b(Discussion)34 b(and)h(Implications)0 2916 y(6)143
b(Conclusion)0 3202 y(Refer)m(ences)p 0 TeXcolorgray
0 TeXcolorgray 0 3387 a Fd(Ostro)o(v)o(e,)16 b(J.)g(\(2018\).)i
Fc(When)e Fb(')p Fc(-Agr)m(eement)f(T)-8 b(ar)m(g)o(ets)17
b(T)-8 b(opics:)23 b(The)16 b(V)-6 b(ie)o(w)17 b(fr)l(om)g(San)e(Mart)
2608 3388 y(\264)2610 3387 y(\021n)h(P)-7 b(er)o(as)16
b(Mixtec)p Fd(.)21 b(PhD)16 b(thesis,)i(Uni)n(v)o(ersity)98
3487 y(of)h(California)h(Santa)g(Cruz.)p 0 TeXcolorgray
0 TeXcolorgray 0 3611 a(Polinsk)o(y)-5 b(,)19 b(M.)h(and)f(Potsdam,)h
(E.)g(\(2002\).)27 b(Backw)o(ard)20 b(control.)28 b Fc(Linguistic)19
b(Inquiry)p Fd(,)g(33\(2\):245\226282.)p 0 TeXcolorgray
0 5309 1560 4 v 149 5400 a(*Authors)g(are)h(listed)h(in)f(alphabetical)
f(order)-5 b(.)24 b(All)d(remaining)e(errors)g(are)h(each)g(other')-5
b(s.)p 0 TeXcolorgray 0 TeXcolorgray 1925 5649 a Fa(1)p
0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
